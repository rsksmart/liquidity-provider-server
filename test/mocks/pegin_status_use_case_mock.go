// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	quote "github.com/rsksmart/liquidity-provider-server/internal/entities/quote"
)

// PeginStatusUseCaseMock is an autogenerated mock type for the PeginStatusUseCase type
type PeginStatusUseCaseMock struct {
	mock.Mock
}

type PeginStatusUseCaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PeginStatusUseCaseMock) EXPECT() *PeginStatusUseCaseMock_Expecter {
	return &PeginStatusUseCaseMock_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, quoteHash
func (_m *PeginStatusUseCaseMock) Run(ctx context.Context, quoteHash string) (quote.WatchedPeginQuote, error) {
	ret := _m.Called(ctx, quoteHash)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 quote.WatchedPeginQuote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (quote.WatchedPeginQuote, error)); ok {
		return rf(ctx, quoteHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) quote.WatchedPeginQuote); ok {
		r0 = rf(ctx, quoteHash)
	} else {
		r0 = ret.Get(0).(quote.WatchedPeginQuote)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, quoteHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginStatusUseCaseMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type PeginStatusUseCaseMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - quoteHash string
func (_e *PeginStatusUseCaseMock_Expecter) Run(ctx interface{}, quoteHash interface{}) *PeginStatusUseCaseMock_Run_Call {
	return &PeginStatusUseCaseMock_Run_Call{Call: _e.mock.On("Run", ctx, quoteHash)}
}

func (_c *PeginStatusUseCaseMock_Run_Call) Run(run func(ctx context.Context, quoteHash string)) *PeginStatusUseCaseMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PeginStatusUseCaseMock_Run_Call) Return(_a0 quote.WatchedPeginQuote, _a1 error) *PeginStatusUseCaseMock_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginStatusUseCaseMock_Run_Call) RunAndReturn(run func(context.Context, string) (quote.WatchedPeginQuote, error)) *PeginStatusUseCaseMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeginStatusUseCaseMock creates a new instance of PeginStatusUseCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeginStatusUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeginStatusUseCaseMock {
	mock := &PeginStatusUseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
