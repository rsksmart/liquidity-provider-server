// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// TimerMock is an autogenerated mock type for the Timer type
type TimerMock struct {
	mock.Mock
}

type TimerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TimerMock) EXPECT() *TimerMock_Expecter {
	return &TimerMock_Expecter{mock: &_m.Mock}
}

// C provides a mock function with no fields
func (_m *TimerMock) C() <-chan time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 <-chan time.Time
	if rf, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}

	return r0
}

// TimerMock_C_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'C'
type TimerMock_C_Call struct {
	*mock.Call
}

// C is a helper method to define mock.On call
func (_e *TimerMock_Expecter) C() *TimerMock_C_Call {
	return &TimerMock_C_Call{Call: _e.mock.On("C")}
}

func (_c *TimerMock_C_Call) Run(run func()) *TimerMock_C_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TimerMock_C_Call) Return(_a0 <-chan time.Time) *TimerMock_C_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TimerMock_C_Call) RunAndReturn(run func() <-chan time.Time) *TimerMock_C_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *TimerMock) Stop() {
	_m.Called()
}

// TimerMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type TimerMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *TimerMock_Expecter) Stop() *TimerMock_Stop_Call {
	return &TimerMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *TimerMock_Stop_Call) Run(run func()) *TimerMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TimerMock_Stop_Call) Return() *TimerMock_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *TimerMock_Stop_Call) RunAndReturn(run func()) *TimerMock_Stop_Call {
	_c.Run(run)
	return _c
}

// NewTimerMock creates a new instance of TimerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimerMock {
	mock := &TimerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
