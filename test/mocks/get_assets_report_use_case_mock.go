// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"

	mock "github.com/stretchr/testify/mock"

	reports "github.com/rsksmart/liquidity-provider-server/internal/usecases/reports"
)

// GetAssetsReportUseCaseMock is an autogenerated mock type for the GetAssetsReportUseCase type
type GetAssetsReportUseCaseMock struct {
	mock.Mock
}

type GetAssetsReportUseCaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GetAssetsReportUseCaseMock) EXPECT() *GetAssetsReportUseCaseMock_Expecter {
	return &GetAssetsReportUseCaseMock_Expecter{mock: &_m.Mock}
}

// GetBTCLiquidity provides a mock function with given fields: ctx
func (_m *GetAssetsReportUseCaseMock) GetBTCLiquidity(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCLiquidity")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_GetBTCLiquidity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTCLiquidity'
type GetAssetsReportUseCaseMock_GetBTCLiquidity_Call struct {
	*mock.Call
}

// GetBTCLiquidity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GetAssetsReportUseCaseMock_Expecter) GetBTCLiquidity(ctx interface{}) *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call {
	return &GetAssetsReportUseCaseMock_GetBTCLiquidity_Call{Call: _e.mock.On("GetBTCLiquidity", ctx)}
}

func (_c *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call) Run(run func(ctx context.Context)) *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call) Return(_a0 *entities.Wei, _a1 error) *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *GetAssetsReportUseCaseMock_GetBTCLiquidity_Call {
	_c.Call.Return(run)
	return _c
}

// GetBTCLocked provides a mock function with given fields: ctx
func (_m *GetAssetsReportUseCaseMock) GetBTCLocked(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCLocked")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_GetBTCLocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTCLocked'
type GetAssetsReportUseCaseMock_GetBTCLocked_Call struct {
	*mock.Call
}

// GetBTCLocked is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GetAssetsReportUseCaseMock_Expecter) GetBTCLocked(ctx interface{}) *GetAssetsReportUseCaseMock_GetBTCLocked_Call {
	return &GetAssetsReportUseCaseMock_GetBTCLocked_Call{Call: _e.mock.On("GetBTCLocked", ctx)}
}

func (_c *GetAssetsReportUseCaseMock_GetBTCLocked_Call) Run(run func(ctx context.Context)) *GetAssetsReportUseCaseMock_GetBTCLocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetBTCLocked_Call) Return(_a0 *entities.Wei, _a1 error) *GetAssetsReportUseCaseMock_GetBTCLocked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetBTCLocked_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *GetAssetsReportUseCaseMock_GetBTCLocked_Call {
	_c.Call.Return(run)
	return _c
}

// GetBtcBalance provides a mock function with no fields
func (_m *GetAssetsReportUseCaseMock) GetBtcBalance() (*entities.Wei, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBtcBalance")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func() (*entities.Wei, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *entities.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_GetBtcBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBtcBalance'
type GetAssetsReportUseCaseMock_GetBtcBalance_Call struct {
	*mock.Call
}

// GetBtcBalance is a helper method to define mock.On call
func (_e *GetAssetsReportUseCaseMock_Expecter) GetBtcBalance() *GetAssetsReportUseCaseMock_GetBtcBalance_Call {
	return &GetAssetsReportUseCaseMock_GetBtcBalance_Call{Call: _e.mock.On("GetBtcBalance")}
}

func (_c *GetAssetsReportUseCaseMock_GetBtcBalance_Call) Run(run func()) *GetAssetsReportUseCaseMock_GetBtcBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetBtcBalance_Call) Return(_a0 *entities.Wei, _a1 error) *GetAssetsReportUseCaseMock_GetBtcBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetBtcBalance_Call) RunAndReturn(run func() (*entities.Wei, error)) *GetAssetsReportUseCaseMock_GetBtcBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetRBTCBalance provides a mock function with given fields: ctx
func (_m *GetAssetsReportUseCaseMock) GetRBTCBalance(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRBTCBalance")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_GetRBTCBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRBTCBalance'
type GetAssetsReportUseCaseMock_GetRBTCBalance_Call struct {
	*mock.Call
}

// GetRBTCBalance is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GetAssetsReportUseCaseMock_Expecter) GetRBTCBalance(ctx interface{}) *GetAssetsReportUseCaseMock_GetRBTCBalance_Call {
	return &GetAssetsReportUseCaseMock_GetRBTCBalance_Call{Call: _e.mock.On("GetRBTCBalance", ctx)}
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCBalance_Call) Run(run func(ctx context.Context)) *GetAssetsReportUseCaseMock_GetRBTCBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCBalance_Call) Return(_a0 *entities.Wei, _a1 error) *GetAssetsReportUseCaseMock_GetRBTCBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCBalance_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *GetAssetsReportUseCaseMock_GetRBTCBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetRBTCLiquidity provides a mock function with given fields: ctx
func (_m *GetAssetsReportUseCaseMock) GetRBTCLiquidity(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRBTCLiquidity")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRBTCLiquidity'
type GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call struct {
	*mock.Call
}

// GetRBTCLiquidity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GetAssetsReportUseCaseMock_Expecter) GetRBTCLiquidity(ctx interface{}) *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call {
	return &GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call{Call: _e.mock.On("GetRBTCLiquidity", ctx)}
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call) Run(run func(ctx context.Context)) *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call) Return(_a0 *entities.Wei, _a1 error) *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *GetAssetsReportUseCaseMock_GetRBTCLiquidity_Call {
	_c.Call.Return(run)
	return _c
}

// GetRBTCLocked provides a mock function with given fields: ctx
func (_m *GetAssetsReportUseCaseMock) GetRBTCLocked(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRBTCLocked")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_GetRBTCLocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRBTCLocked'
type GetAssetsReportUseCaseMock_GetRBTCLocked_Call struct {
	*mock.Call
}

// GetRBTCLocked is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GetAssetsReportUseCaseMock_Expecter) GetRBTCLocked(ctx interface{}) *GetAssetsReportUseCaseMock_GetRBTCLocked_Call {
	return &GetAssetsReportUseCaseMock_GetRBTCLocked_Call{Call: _e.mock.On("GetRBTCLocked", ctx)}
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCLocked_Call) Run(run func(ctx context.Context)) *GetAssetsReportUseCaseMock_GetRBTCLocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCLocked_Call) Return(_a0 *entities.Wei, _a1 error) *GetAssetsReportUseCaseMock_GetRBTCLocked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_GetRBTCLocked_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *GetAssetsReportUseCaseMock_GetRBTCLocked_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *GetAssetsReportUseCaseMock) Run(ctx context.Context) (reports.GetAssetsReportResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 reports.GetAssetsReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (reports.GetAssetsReportResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) reports.GetAssetsReportResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(reports.GetAssetsReportResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsReportUseCaseMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type GetAssetsReportUseCaseMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GetAssetsReportUseCaseMock_Expecter) Run(ctx interface{}) *GetAssetsReportUseCaseMock_Run_Call {
	return &GetAssetsReportUseCaseMock_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *GetAssetsReportUseCaseMock_Run_Call) Run(run func(ctx context.Context)) *GetAssetsReportUseCaseMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GetAssetsReportUseCaseMock_Run_Call) Return(_a0 reports.GetAssetsReportResponse, _a1 error) *GetAssetsReportUseCaseMock_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAssetsReportUseCaseMock_Run_Call) RunAndReturn(run func(context.Context) (reports.GetAssetsReportResponse, error)) *GetAssetsReportUseCaseMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetAssetsReportUseCaseMock creates a new instance of GetAssetsReportUseCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetAssetsReportUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetAssetsReportUseCaseMock {
	mock := &GetAssetsReportUseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
