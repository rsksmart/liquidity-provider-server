// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/rsksmart/liquidity-provider-server/internal/entities/utils"
)

// PegConfigurationMock is an autogenerated mock type for the PegConfiguration type
type PegConfigurationMock struct {
	mock.Mock
}

type PegConfigurationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PegConfigurationMock) EXPECT() *PegConfigurationMock_Expecter {
	return &PegConfigurationMock_Expecter{mock: &_m.Mock}
}

// GetFeePercentage provides a mock function with no fields
func (_m *PegConfigurationMock) GetFeePercentage() *utils.BigFloat {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeePercentage")
	}

	var r0 *utils.BigFloat
	if rf, ok := ret.Get(0).(func() *utils.BigFloat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.BigFloat)
		}
	}

	return r0
}

// PegConfigurationMock_GetFeePercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeePercentage'
type PegConfigurationMock_GetFeePercentage_Call struct {
	*mock.Call
}

// GetFeePercentage is a helper method to define mock.On call
func (_e *PegConfigurationMock_Expecter) GetFeePercentage() *PegConfigurationMock_GetFeePercentage_Call {
	return &PegConfigurationMock_GetFeePercentage_Call{Call: _e.mock.On("GetFeePercentage")}
}

func (_c *PegConfigurationMock_GetFeePercentage_Call) Run(run func()) *PegConfigurationMock_GetFeePercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PegConfigurationMock_GetFeePercentage_Call) Return(_a0 *utils.BigFloat) *PegConfigurationMock_GetFeePercentage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PegConfigurationMock_GetFeePercentage_Call) RunAndReturn(run func() *utils.BigFloat) *PegConfigurationMock_GetFeePercentage_Call {
	_c.Call.Return(run)
	return _c
}

// GetFixedFee provides a mock function with no fields
func (_m *PegConfigurationMock) GetFixedFee() *entities.Wei {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFixedFee")
	}

	var r0 *entities.Wei
	if rf, ok := ret.Get(0).(func() *entities.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	return r0
}

// PegConfigurationMock_GetFixedFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFixedFee'
type PegConfigurationMock_GetFixedFee_Call struct {
	*mock.Call
}

// GetFixedFee is a helper method to define mock.On call
func (_e *PegConfigurationMock_Expecter) GetFixedFee() *PegConfigurationMock_GetFixedFee_Call {
	return &PegConfigurationMock_GetFixedFee_Call{Call: _e.mock.On("GetFixedFee")}
}

func (_c *PegConfigurationMock_GetFixedFee_Call) Run(run func()) *PegConfigurationMock_GetFixedFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PegConfigurationMock_GetFixedFee_Call) Return(_a0 *entities.Wei) *PegConfigurationMock_GetFixedFee_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PegConfigurationMock_GetFixedFee_Call) RunAndReturn(run func() *entities.Wei) *PegConfigurationMock_GetFixedFee_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAmount provides a mock function with given fields: amount
func (_m *PegConfigurationMock) ValidateAmount(amount *entities.Wei) error {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAmount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Wei) error); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PegConfigurationMock_ValidateAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAmount'
type PegConfigurationMock_ValidateAmount_Call struct {
	*mock.Call
}

// ValidateAmount is a helper method to define mock.On call
//   - amount *entities.Wei
func (_e *PegConfigurationMock_Expecter) ValidateAmount(amount interface{}) *PegConfigurationMock_ValidateAmount_Call {
	return &PegConfigurationMock_ValidateAmount_Call{Call: _e.mock.On("ValidateAmount", amount)}
}

func (_c *PegConfigurationMock_ValidateAmount_Call) Run(run func(amount *entities.Wei)) *PegConfigurationMock_ValidateAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Wei))
	})
	return _c
}

func (_c *PegConfigurationMock_ValidateAmount_Call) Return(_a0 error) *PegConfigurationMock_ValidateAmount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PegConfigurationMock_ValidateAmount_Call) RunAndReturn(run func(*entities.Wei) error) *PegConfigurationMock_ValidateAmount_Call {
	_c.Call.Return(run)
	return _c
}

// NewPegConfigurationMock creates a new instance of PegConfigurationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPegConfigurationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PegConfigurationMock {
	mock := &PegConfigurationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
