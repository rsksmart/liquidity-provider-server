// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	blockchain "github.com/rsksmart/liquidity-provider-server/internal/entities/blockchain"

	mock "github.com/stretchr/testify/mock"
)

// BitcoinWalletMock is an autogenerated mock type for the BitcoinWallet type
type BitcoinWalletMock struct {
	mock.Mock
}

type BitcoinWalletMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BitcoinWalletMock) EXPECT() *BitcoinWalletMock_Expecter {
	return &BitcoinWalletMock_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *BitcoinWalletMock) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BitcoinWalletMock_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type BitcoinWalletMock_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *BitcoinWalletMock_Expecter) Address() *BitcoinWalletMock_Address_Call {
	return &BitcoinWalletMock_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *BitcoinWalletMock_Address_Call) Run(run func()) *BitcoinWalletMock_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BitcoinWalletMock_Address_Call) Return(_a0 string) *BitcoinWalletMock_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BitcoinWalletMock_Address_Call) RunAndReturn(run func() string) *BitcoinWalletMock_Address_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateTxFees provides a mock function with given fields: toAddress, value
func (_m *BitcoinWalletMock) EstimateTxFees(toAddress string, value *entities.Wei) (*entities.Wei, error) {
	ret := _m.Called(toAddress, value)

	if len(ret) == 0 {
		panic("no return value specified for EstimateTxFees")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *entities.Wei) (*entities.Wei, error)); ok {
		return rf(toAddress, value)
	}
	if rf, ok := ret.Get(0).(func(string, *entities.Wei) *entities.Wei); ok {
		r0 = rf(toAddress, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *entities.Wei) error); ok {
		r1 = rf(toAddress, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BitcoinWalletMock_EstimateTxFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateTxFees'
type BitcoinWalletMock_EstimateTxFees_Call struct {
	*mock.Call
}

// EstimateTxFees is a helper method to define mock.On call
//   - toAddress string
//   - value *entities.Wei
func (_e *BitcoinWalletMock_Expecter) EstimateTxFees(toAddress interface{}, value interface{}) *BitcoinWalletMock_EstimateTxFees_Call {
	return &BitcoinWalletMock_EstimateTxFees_Call{Call: _e.mock.On("EstimateTxFees", toAddress, value)}
}

func (_c *BitcoinWalletMock_EstimateTxFees_Call) Run(run func(toAddress string, value *entities.Wei)) *BitcoinWalletMock_EstimateTxFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entities.Wei))
	})
	return _c
}

func (_c *BitcoinWalletMock_EstimateTxFees_Call) Return(_a0 *entities.Wei, _a1 error) *BitcoinWalletMock_EstimateTxFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BitcoinWalletMock_EstimateTxFees_Call) RunAndReturn(run func(string, *entities.Wei) (*entities.Wei, error)) *BitcoinWalletMock_EstimateTxFees_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields:
func (_m *BitcoinWalletMock) GetBalance() (*entities.Wei, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func() (*entities.Wei, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *entities.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BitcoinWalletMock_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type BitcoinWalletMock_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
func (_e *BitcoinWalletMock_Expecter) GetBalance() *BitcoinWalletMock_GetBalance_Call {
	return &BitcoinWalletMock_GetBalance_Call{Call: _e.mock.On("GetBalance")}
}

func (_c *BitcoinWalletMock_GetBalance_Call) Run(run func()) *BitcoinWalletMock_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BitcoinWalletMock_GetBalance_Call) Return(_a0 *entities.Wei, _a1 error) *BitcoinWalletMock_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BitcoinWalletMock_GetBalance_Call) RunAndReturn(run func() (*entities.Wei, error)) *BitcoinWalletMock_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: address
func (_m *BitcoinWalletMock) GetTransactions(address string) ([]blockchain.BitcoinTransactionInformation, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []blockchain.BitcoinTransactionInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]blockchain.BitcoinTransactionInformation, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) []blockchain.BitcoinTransactionInformation); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blockchain.BitcoinTransactionInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BitcoinWalletMock_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type BitcoinWalletMock_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - address string
func (_e *BitcoinWalletMock_Expecter) GetTransactions(address interface{}) *BitcoinWalletMock_GetTransactions_Call {
	return &BitcoinWalletMock_GetTransactions_Call{Call: _e.mock.On("GetTransactions", address)}
}

func (_c *BitcoinWalletMock_GetTransactions_Call) Run(run func(address string)) *BitcoinWalletMock_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BitcoinWalletMock_GetTransactions_Call) Return(_a0 []blockchain.BitcoinTransactionInformation, _a1 error) *BitcoinWalletMock_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BitcoinWalletMock_GetTransactions_Call) RunAndReturn(run func(string) ([]blockchain.BitcoinTransactionInformation, error)) *BitcoinWalletMock_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// ImportAddress provides a mock function with given fields: address
func (_m *BitcoinWalletMock) ImportAddress(address string) error {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for ImportAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BitcoinWalletMock_ImportAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportAddress'
type BitcoinWalletMock_ImportAddress_Call struct {
	*mock.Call
}

// ImportAddress is a helper method to define mock.On call
//   - address string
func (_e *BitcoinWalletMock_Expecter) ImportAddress(address interface{}) *BitcoinWalletMock_ImportAddress_Call {
	return &BitcoinWalletMock_ImportAddress_Call{Call: _e.mock.On("ImportAddress", address)}
}

func (_c *BitcoinWalletMock_ImportAddress_Call) Run(run func(address string)) *BitcoinWalletMock_ImportAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BitcoinWalletMock_ImportAddress_Call) Return(_a0 error) *BitcoinWalletMock_ImportAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BitcoinWalletMock_ImportAddress_Call) RunAndReturn(run func(string) error) *BitcoinWalletMock_ImportAddress_Call {
	_c.Call.Return(run)
	return _c
}

// SendWithOpReturn provides a mock function with given fields: address, value, opReturnContent
func (_m *BitcoinWalletMock) SendWithOpReturn(address string, value *entities.Wei, opReturnContent []byte) (string, error) {
	ret := _m.Called(address, value, opReturnContent)

	if len(ret) == 0 {
		panic("no return value specified for SendWithOpReturn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *entities.Wei, []byte) (string, error)); ok {
		return rf(address, value, opReturnContent)
	}
	if rf, ok := ret.Get(0).(func(string, *entities.Wei, []byte) string); ok {
		r0 = rf(address, value, opReturnContent)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *entities.Wei, []byte) error); ok {
		r1 = rf(address, value, opReturnContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BitcoinWalletMock_SendWithOpReturn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWithOpReturn'
type BitcoinWalletMock_SendWithOpReturn_Call struct {
	*mock.Call
}

// SendWithOpReturn is a helper method to define mock.On call
//   - address string
//   - value *entities.Wei
//   - opReturnContent []byte
func (_e *BitcoinWalletMock_Expecter) SendWithOpReturn(address interface{}, value interface{}, opReturnContent interface{}) *BitcoinWalletMock_SendWithOpReturn_Call {
	return &BitcoinWalletMock_SendWithOpReturn_Call{Call: _e.mock.On("SendWithOpReturn", address, value, opReturnContent)}
}

func (_c *BitcoinWalletMock_SendWithOpReturn_Call) Run(run func(address string, value *entities.Wei, opReturnContent []byte)) *BitcoinWalletMock_SendWithOpReturn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*entities.Wei), args[2].([]byte))
	})
	return _c
}

func (_c *BitcoinWalletMock_SendWithOpReturn_Call) Return(_a0 string, _a1 error) *BitcoinWalletMock_SendWithOpReturn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BitcoinWalletMock_SendWithOpReturn_Call) RunAndReturn(run func(string, *entities.Wei, []byte) (string, error)) *BitcoinWalletMock_SendWithOpReturn_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: closeChannel
func (_m *BitcoinWalletMock) Shutdown(closeChannel chan<- bool) {
	_m.Called(closeChannel)
}

// BitcoinWalletMock_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type BitcoinWalletMock_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - closeChannel chan<- bool
func (_e *BitcoinWalletMock_Expecter) Shutdown(closeChannel interface{}) *BitcoinWalletMock_Shutdown_Call {
	return &BitcoinWalletMock_Shutdown_Call{Call: _e.mock.On("Shutdown", closeChannel)}
}

func (_c *BitcoinWalletMock_Shutdown_Call) Run(run func(closeChannel chan<- bool)) *BitcoinWalletMock_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan<- bool))
	})
	return _c
}

func (_c *BitcoinWalletMock_Shutdown_Call) Return() *BitcoinWalletMock_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *BitcoinWalletMock_Shutdown_Call) RunAndReturn(run func(chan<- bool)) *BitcoinWalletMock_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields:
func (_m *BitcoinWalletMock) Unlock() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BitcoinWalletMock_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type BitcoinWalletMock_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *BitcoinWalletMock_Expecter) Unlock() *BitcoinWalletMock_Unlock_Call {
	return &BitcoinWalletMock_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *BitcoinWalletMock_Unlock_Call) Run(run func()) *BitcoinWalletMock_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BitcoinWalletMock_Unlock_Call) Return(_a0 error) *BitcoinWalletMock_Unlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BitcoinWalletMock_Unlock_Call) RunAndReturn(run func() error) *BitcoinWalletMock_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewBitcoinWalletMock creates a new instance of BitcoinWalletMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBitcoinWalletMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BitcoinWalletMock {
	mock := &BitcoinWalletMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
