// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	liquidity_provider "github.com/rsksmart/liquidity-provider-server/internal/usecases/liquidity_provider"
	mock "github.com/stretchr/testify/mock"

	pegin "github.com/rsksmart/liquidity-provider-server/internal/usecases/pegin"

	pegout "github.com/rsksmart/liquidity-provider-server/internal/usecases/pegout"

	usecases "github.com/rsksmart/liquidity-provider-server/internal/usecases"
)

// UseCaseRegistryMock is an autogenerated mock type for the UseCaseRegistry type
type UseCaseRegistryMock struct {
	mock.Mock
}

type UseCaseRegistryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCaseRegistryMock) EXPECT() *UseCaseRegistryMock_Expecter {
	return &UseCaseRegistryMock_Expecter{mock: &_m.Mock}
}

// AddPeginCollateralUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) AddPeginCollateralUseCase() *pegin.AddCollateralUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddPeginCollateralUseCase")
	}

	var r0 *pegin.AddCollateralUseCase
	if rf, ok := ret.Get(0).(func() *pegin.AddCollateralUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegin.AddCollateralUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_AddPeginCollateralUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPeginCollateralUseCase'
type UseCaseRegistryMock_AddPeginCollateralUseCase_Call struct {
	*mock.Call
}

// AddPeginCollateralUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) AddPeginCollateralUseCase() *UseCaseRegistryMock_AddPeginCollateralUseCase_Call {
	return &UseCaseRegistryMock_AddPeginCollateralUseCase_Call{Call: _e.mock.On("AddPeginCollateralUseCase")}
}

func (_c *UseCaseRegistryMock_AddPeginCollateralUseCase_Call) Run(run func()) *UseCaseRegistryMock_AddPeginCollateralUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_AddPeginCollateralUseCase_Call) Return(_a0 *pegin.AddCollateralUseCase) *UseCaseRegistryMock_AddPeginCollateralUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_AddPeginCollateralUseCase_Call) RunAndReturn(run func() *pegin.AddCollateralUseCase) *UseCaseRegistryMock_AddPeginCollateralUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// AddPegoutCollateralUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) AddPegoutCollateralUseCase() *pegout.AddCollateralUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddPegoutCollateralUseCase")
	}

	var r0 *pegout.AddCollateralUseCase
	if rf, ok := ret.Get(0).(func() *pegout.AddCollateralUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegout.AddCollateralUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_AddPegoutCollateralUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPegoutCollateralUseCase'
type UseCaseRegistryMock_AddPegoutCollateralUseCase_Call struct {
	*mock.Call
}

// AddPegoutCollateralUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) AddPegoutCollateralUseCase() *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call {
	return &UseCaseRegistryMock_AddPegoutCollateralUseCase_Call{Call: _e.mock.On("AddPegoutCollateralUseCase")}
}

func (_c *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call) Run(run func()) *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call) Return(_a0 *pegout.AddCollateralUseCase) *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call) RunAndReturn(run func() *pegout.AddCollateralUseCase) *UseCaseRegistryMock_AddPegoutCollateralUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeStatusUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) ChangeStatusUseCase() *liquidity_provider.ChangeStatusUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatusUseCase")
	}

	var r0 *liquidity_provider.ChangeStatusUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.ChangeStatusUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.ChangeStatusUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_ChangeStatusUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatusUseCase'
type UseCaseRegistryMock_ChangeStatusUseCase_Call struct {
	*mock.Call
}

// ChangeStatusUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) ChangeStatusUseCase() *UseCaseRegistryMock_ChangeStatusUseCase_Call {
	return &UseCaseRegistryMock_ChangeStatusUseCase_Call{Call: _e.mock.On("ChangeStatusUseCase")}
}

func (_c *UseCaseRegistryMock_ChangeStatusUseCase_Call) Run(run func()) *UseCaseRegistryMock_ChangeStatusUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_ChangeStatusUseCase_Call) Return(_a0 *liquidity_provider.ChangeStatusUseCase) *UseCaseRegistryMock_ChangeStatusUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_ChangeStatusUseCase_Call) RunAndReturn(run func() *liquidity_provider.ChangeStatusUseCase) *UseCaseRegistryMock_ChangeStatusUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDefaultCredentialsUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GenerateDefaultCredentialsUseCase() *liquidity_provider.GenerateDefaultCredentialsUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateDefaultCredentialsUseCase")
	}

	var r0 *liquidity_provider.GenerateDefaultCredentialsUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.GenerateDefaultCredentialsUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.GenerateDefaultCredentialsUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDefaultCredentialsUseCase'
type UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call struct {
	*mock.Call
}

// GenerateDefaultCredentialsUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GenerateDefaultCredentialsUseCase() *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call {
	return &UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call{Call: _e.mock.On("GenerateDefaultCredentialsUseCase")}
}

func (_c *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call) Run(run func()) *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call) Return(_a0 *liquidity_provider.GenerateDefaultCredentialsUseCase) *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call) RunAndReturn(run func() *liquidity_provider.GenerateDefaultCredentialsUseCase) *UseCaseRegistryMock_GenerateDefaultCredentialsUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetAcceptPeginQuoteUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetAcceptPeginQuoteUseCase() *pegin.AcceptQuoteUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAcceptPeginQuoteUseCase")
	}

	var r0 *pegin.AcceptQuoteUseCase
	if rf, ok := ret.Get(0).(func() *pegin.AcceptQuoteUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegin.AcceptQuoteUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAcceptPeginQuoteUseCase'
type UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call struct {
	*mock.Call
}

// GetAcceptPeginQuoteUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetAcceptPeginQuoteUseCase() *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call {
	return &UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call{Call: _e.mock.On("GetAcceptPeginQuoteUseCase")}
}

func (_c *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call) Return(_a0 *pegin.AcceptQuoteUseCase) *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call) RunAndReturn(run func() *pegin.AcceptQuoteUseCase) *UseCaseRegistryMock_GetAcceptPeginQuoteUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetAcceptPegoutQuoteUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetAcceptPegoutQuoteUseCase() *pegout.AcceptQuoteUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAcceptPegoutQuoteUseCase")
	}

	var r0 *pegout.AcceptQuoteUseCase
	if rf, ok := ret.Get(0).(func() *pegout.AcceptQuoteUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegout.AcceptQuoteUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAcceptPegoutQuoteUseCase'
type UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call struct {
	*mock.Call
}

// GetAcceptPegoutQuoteUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetAcceptPegoutQuoteUseCase() *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call {
	return &UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call{Call: _e.mock.On("GetAcceptPegoutQuoteUseCase")}
}

func (_c *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call) Return(_a0 *pegout.AcceptQuoteUseCase) *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call) RunAndReturn(run func() *pegout.AcceptQuoteUseCase) *UseCaseRegistryMock_GetAcceptPegoutQuoteUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableLiquidityUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetAvailableLiquidityUseCase() *liquidity_provider.GetAvailableLiquidityUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableLiquidityUseCase")
	}

	var r0 *liquidity_provider.GetAvailableLiquidityUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.GetAvailableLiquidityUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.GetAvailableLiquidityUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableLiquidityUseCase'
type UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call struct {
	*mock.Call
}

// GetAvailableLiquidityUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetAvailableLiquidityUseCase() *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call {
	return &UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call{Call: _e.mock.On("GetAvailableLiquidityUseCase")}
}

func (_c *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call) Return(_a0 *liquidity_provider.GetAvailableLiquidityUseCase) *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call) RunAndReturn(run func() *liquidity_provider.GetAvailableLiquidityUseCase) *UseCaseRegistryMock_GetAvailableLiquidityUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurationUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetConfigurationUseCase() *liquidity_provider.GetConfigUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationUseCase")
	}

	var r0 *liquidity_provider.GetConfigUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.GetConfigUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.GetConfigUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetConfigurationUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurationUseCase'
type UseCaseRegistryMock_GetConfigurationUseCase_Call struct {
	*mock.Call
}

// GetConfigurationUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetConfigurationUseCase() *UseCaseRegistryMock_GetConfigurationUseCase_Call {
	return &UseCaseRegistryMock_GetConfigurationUseCase_Call{Call: _e.mock.On("GetConfigurationUseCase")}
}

func (_c *UseCaseRegistryMock_GetConfigurationUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetConfigurationUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetConfigurationUseCase_Call) Return(_a0 *liquidity_provider.GetConfigUseCase) *UseCaseRegistryMock_GetConfigurationUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetConfigurationUseCase_Call) RunAndReturn(run func() *liquidity_provider.GetConfigUseCase) *UseCaseRegistryMock_GetConfigurationUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagementUiDataUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetManagementUiDataUseCase() *liquidity_provider.GetManagementUiDataUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetManagementUiDataUseCase")
	}

	var r0 *liquidity_provider.GetManagementUiDataUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.GetManagementUiDataUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.GetManagementUiDataUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetManagementUiDataUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagementUiDataUseCase'
type UseCaseRegistryMock_GetManagementUiDataUseCase_Call struct {
	*mock.Call
}

// GetManagementUiDataUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetManagementUiDataUseCase() *UseCaseRegistryMock_GetManagementUiDataUseCase_Call {
	return &UseCaseRegistryMock_GetManagementUiDataUseCase_Call{Call: _e.mock.On("GetManagementUiDataUseCase")}
}

func (_c *UseCaseRegistryMock_GetManagementUiDataUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetManagementUiDataUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetManagementUiDataUseCase_Call) Return(_a0 *liquidity_provider.GetManagementUiDataUseCase) *UseCaseRegistryMock_GetManagementUiDataUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetManagementUiDataUseCase_Call) RunAndReturn(run func() *liquidity_provider.GetManagementUiDataUseCase) *UseCaseRegistryMock_GetManagementUiDataUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeginCollateralUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetPeginCollateralUseCase() *pegin.GetCollateralUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeginCollateralUseCase")
	}

	var r0 *pegin.GetCollateralUseCase
	if rf, ok := ret.Get(0).(func() *pegin.GetCollateralUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegin.GetCollateralUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetPeginCollateralUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeginCollateralUseCase'
type UseCaseRegistryMock_GetPeginCollateralUseCase_Call struct {
	*mock.Call
}

// GetPeginCollateralUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetPeginCollateralUseCase() *UseCaseRegistryMock_GetPeginCollateralUseCase_Call {
	return &UseCaseRegistryMock_GetPeginCollateralUseCase_Call{Call: _e.mock.On("GetPeginCollateralUseCase")}
}

func (_c *UseCaseRegistryMock_GetPeginCollateralUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetPeginCollateralUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetPeginCollateralUseCase_Call) Return(_a0 *pegin.GetCollateralUseCase) *UseCaseRegistryMock_GetPeginCollateralUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetPeginCollateralUseCase_Call) RunAndReturn(run func() *pegin.GetCollateralUseCase) *UseCaseRegistryMock_GetPeginCollateralUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeginQuoteUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetPeginQuoteUseCase() *pegin.GetQuoteUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeginQuoteUseCase")
	}

	var r0 *pegin.GetQuoteUseCase
	if rf, ok := ret.Get(0).(func() *pegin.GetQuoteUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegin.GetQuoteUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetPeginQuoteUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeginQuoteUseCase'
type UseCaseRegistryMock_GetPeginQuoteUseCase_Call struct {
	*mock.Call
}

// GetPeginQuoteUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetPeginQuoteUseCase() *UseCaseRegistryMock_GetPeginQuoteUseCase_Call {
	return &UseCaseRegistryMock_GetPeginQuoteUseCase_Call{Call: _e.mock.On("GetPeginQuoteUseCase")}
}

func (_c *UseCaseRegistryMock_GetPeginQuoteUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetPeginQuoteUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetPeginQuoteUseCase_Call) Return(_a0 *pegin.GetQuoteUseCase) *UseCaseRegistryMock_GetPeginQuoteUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetPeginQuoteUseCase_Call) RunAndReturn(run func() *pegin.GetQuoteUseCase) *UseCaseRegistryMock_GetPeginQuoteUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeginStatusUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetPeginStatusUseCase() *pegin.StatusUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPeginStatusUseCase")
	}

	var r0 *pegin.StatusUseCase
	if rf, ok := ret.Get(0).(func() *pegin.StatusUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegin.StatusUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetPeginStatusUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeginStatusUseCase'
type UseCaseRegistryMock_GetPeginStatusUseCase_Call struct {
	*mock.Call
}

// GetPeginStatusUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetPeginStatusUseCase() *UseCaseRegistryMock_GetPeginStatusUseCase_Call {
	return &UseCaseRegistryMock_GetPeginStatusUseCase_Call{Call: _e.mock.On("GetPeginStatusUseCase")}
}

func (_c *UseCaseRegistryMock_GetPeginStatusUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetPeginStatusUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetPeginStatusUseCase_Call) Return(_a0 *pegin.StatusUseCase) *UseCaseRegistryMock_GetPeginStatusUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetPeginStatusUseCase_Call) RunAndReturn(run func() *pegin.StatusUseCase) *UseCaseRegistryMock_GetPeginStatusUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegoutCollateralUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetPegoutCollateralUseCase() *pegout.GetCollateralUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPegoutCollateralUseCase")
	}

	var r0 *pegout.GetCollateralUseCase
	if rf, ok := ret.Get(0).(func() *pegout.GetCollateralUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegout.GetCollateralUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetPegoutCollateralUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegoutCollateralUseCase'
type UseCaseRegistryMock_GetPegoutCollateralUseCase_Call struct {
	*mock.Call
}

// GetPegoutCollateralUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetPegoutCollateralUseCase() *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call {
	return &UseCaseRegistryMock_GetPegoutCollateralUseCase_Call{Call: _e.mock.On("GetPegoutCollateralUseCase")}
}

func (_c *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call) Return(_a0 *pegout.GetCollateralUseCase) *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call) RunAndReturn(run func() *pegout.GetCollateralUseCase) *UseCaseRegistryMock_GetPegoutCollateralUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegoutQuoteUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetPegoutQuoteUseCase() *pegout.GetQuoteUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPegoutQuoteUseCase")
	}

	var r0 *pegout.GetQuoteUseCase
	if rf, ok := ret.Get(0).(func() *pegout.GetQuoteUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegout.GetQuoteUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetPegoutQuoteUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegoutQuoteUseCase'
type UseCaseRegistryMock_GetPegoutQuoteUseCase_Call struct {
	*mock.Call
}

// GetPegoutQuoteUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetPegoutQuoteUseCase() *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call {
	return &UseCaseRegistryMock_GetPegoutQuoteUseCase_Call{Call: _e.mock.On("GetPegoutQuoteUseCase")}
}

func (_c *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call) Return(_a0 *pegout.GetQuoteUseCase) *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call) RunAndReturn(run func() *pegout.GetQuoteUseCase) *UseCaseRegistryMock_GetPegoutQuoteUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegoutStatusUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetPegoutStatusUseCase() *pegout.StatusUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPegoutStatusUseCase")
	}

	var r0 *pegout.StatusUseCase
	if rf, ok := ret.Get(0).(func() *pegout.StatusUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegout.StatusUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetPegoutStatusUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegoutStatusUseCase'
type UseCaseRegistryMock_GetPegoutStatusUseCase_Call struct {
	*mock.Call
}

// GetPegoutStatusUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetPegoutStatusUseCase() *UseCaseRegistryMock_GetPegoutStatusUseCase_Call {
	return &UseCaseRegistryMock_GetPegoutStatusUseCase_Call{Call: _e.mock.On("GetPegoutStatusUseCase")}
}

func (_c *UseCaseRegistryMock_GetPegoutStatusUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetPegoutStatusUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetPegoutStatusUseCase_Call) Return(_a0 *pegout.StatusUseCase) *UseCaseRegistryMock_GetPegoutStatusUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetPegoutStatusUseCase_Call) RunAndReturn(run func() *pegout.StatusUseCase) *UseCaseRegistryMock_GetPegoutStatusUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderDetailUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetProviderDetailUseCase() *liquidity_provider.GetDetailUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviderDetailUseCase")
	}

	var r0 *liquidity_provider.GetDetailUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.GetDetailUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.GetDetailUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetProviderDetailUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderDetailUseCase'
type UseCaseRegistryMock_GetProviderDetailUseCase_Call struct {
	*mock.Call
}

// GetProviderDetailUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetProviderDetailUseCase() *UseCaseRegistryMock_GetProviderDetailUseCase_Call {
	return &UseCaseRegistryMock_GetProviderDetailUseCase_Call{Call: _e.mock.On("GetProviderDetailUseCase")}
}

func (_c *UseCaseRegistryMock_GetProviderDetailUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetProviderDetailUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetProviderDetailUseCase_Call) Return(_a0 *liquidity_provider.GetDetailUseCase) *UseCaseRegistryMock_GetProviderDetailUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetProviderDetailUseCase_Call) RunAndReturn(run func() *liquidity_provider.GetDetailUseCase) *UseCaseRegistryMock_GetProviderDetailUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvidersUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetProvidersUseCase() *liquidity_provider.GetProvidersUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProvidersUseCase")
	}

	var r0 *liquidity_provider.GetProvidersUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.GetProvidersUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.GetProvidersUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetProvidersUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvidersUseCase'
type UseCaseRegistryMock_GetProvidersUseCase_Call struct {
	*mock.Call
}

// GetProvidersUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetProvidersUseCase() *UseCaseRegistryMock_GetProvidersUseCase_Call {
	return &UseCaseRegistryMock_GetProvidersUseCase_Call{Call: _e.mock.On("GetProvidersUseCase")}
}

func (_c *UseCaseRegistryMock_GetProvidersUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetProvidersUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetProvidersUseCase_Call) Return(_a0 *liquidity_provider.GetProvidersUseCase) *UseCaseRegistryMock_GetProvidersUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetProvidersUseCase_Call) RunAndReturn(run func() *liquidity_provider.GetProvidersUseCase) *UseCaseRegistryMock_GetProvidersUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerInfoUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetServerInfoUseCase() *liquidity_provider.ServerInfoUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerInfoUseCase")
	}

	var r0 *liquidity_provider.ServerInfoUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.ServerInfoUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.ServerInfoUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetServerInfoUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerInfoUseCase'
type UseCaseRegistryMock_GetServerInfoUseCase_Call struct {
	*mock.Call
}

// GetServerInfoUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetServerInfoUseCase() *UseCaseRegistryMock_GetServerInfoUseCase_Call {
	return &UseCaseRegistryMock_GetServerInfoUseCase_Call{Call: _e.mock.On("GetServerInfoUseCase")}
}

func (_c *UseCaseRegistryMock_GetServerInfoUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetServerInfoUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetServerInfoUseCase_Call) Return(_a0 *liquidity_provider.ServerInfoUseCase) *UseCaseRegistryMock_GetServerInfoUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetServerInfoUseCase_Call) RunAndReturn(run func() *liquidity_provider.ServerInfoUseCase) *UseCaseRegistryMock_GetServerInfoUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDepositsUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) GetUserDepositsUseCase() *pegout.GetUserDepositsUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserDepositsUseCase")
	}

	var r0 *pegout.GetUserDepositsUseCase
	if rf, ok := ret.Get(0).(func() *pegout.GetUserDepositsUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pegout.GetUserDepositsUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_GetUserDepositsUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDepositsUseCase'
type UseCaseRegistryMock_GetUserDepositsUseCase_Call struct {
	*mock.Call
}

// GetUserDepositsUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) GetUserDepositsUseCase() *UseCaseRegistryMock_GetUserDepositsUseCase_Call {
	return &UseCaseRegistryMock_GetUserDepositsUseCase_Call{Call: _e.mock.On("GetUserDepositsUseCase")}
}

func (_c *UseCaseRegistryMock_GetUserDepositsUseCase_Call) Run(run func()) *UseCaseRegistryMock_GetUserDepositsUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_GetUserDepositsUseCase_Call) Return(_a0 *pegout.GetUserDepositsUseCase) *UseCaseRegistryMock_GetUserDepositsUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_GetUserDepositsUseCase_Call) RunAndReturn(run func() *pegout.GetUserDepositsUseCase) *UseCaseRegistryMock_GetUserDepositsUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// HealthUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) HealthUseCase() *usecases.HealthUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthUseCase")
	}

	var r0 *usecases.HealthUseCase
	if rf, ok := ret.Get(0).(func() *usecases.HealthUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecases.HealthUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_HealthUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthUseCase'
type UseCaseRegistryMock_HealthUseCase_Call struct {
	*mock.Call
}

// HealthUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) HealthUseCase() *UseCaseRegistryMock_HealthUseCase_Call {
	return &UseCaseRegistryMock_HealthUseCase_Call{Call: _e.mock.On("HealthUseCase")}
}

func (_c *UseCaseRegistryMock_HealthUseCase_Call) Run(run func()) *UseCaseRegistryMock_HealthUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_HealthUseCase_Call) Return(_a0 *usecases.HealthUseCase) *UseCaseRegistryMock_HealthUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_HealthUseCase_Call) RunAndReturn(run func() *usecases.HealthUseCase) *UseCaseRegistryMock_HealthUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) LoginUseCase() *liquidity_provider.LoginUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoginUseCase")
	}

	var r0 *liquidity_provider.LoginUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.LoginUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.LoginUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_LoginUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUseCase'
type UseCaseRegistryMock_LoginUseCase_Call struct {
	*mock.Call
}

// LoginUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) LoginUseCase() *UseCaseRegistryMock_LoginUseCase_Call {
	return &UseCaseRegistryMock_LoginUseCase_Call{Call: _e.mock.On("LoginUseCase")}
}

func (_c *UseCaseRegistryMock_LoginUseCase_Call) Run(run func()) *UseCaseRegistryMock_LoginUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_LoginUseCase_Call) Return(_a0 *liquidity_provider.LoginUseCase) *UseCaseRegistryMock_LoginUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_LoginUseCase_Call) RunAndReturn(run func() *liquidity_provider.LoginUseCase) *UseCaseRegistryMock_LoginUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// ResignationUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) ResignationUseCase() *liquidity_provider.ResignUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResignationUseCase")
	}

	var r0 *liquidity_provider.ResignUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.ResignUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.ResignUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_ResignationUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResignationUseCase'
type UseCaseRegistryMock_ResignationUseCase_Call struct {
	*mock.Call
}

// ResignationUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) ResignationUseCase() *UseCaseRegistryMock_ResignationUseCase_Call {
	return &UseCaseRegistryMock_ResignationUseCase_Call{Call: _e.mock.On("ResignationUseCase")}
}

func (_c *UseCaseRegistryMock_ResignationUseCase_Call) Run(run func()) *UseCaseRegistryMock_ResignationUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_ResignationUseCase_Call) Return(_a0 *liquidity_provider.ResignUseCase) *UseCaseRegistryMock_ResignationUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_ResignationUseCase_Call) RunAndReturn(run func() *liquidity_provider.ResignUseCase) *UseCaseRegistryMock_ResignationUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// SetCredentialsUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) SetCredentialsUseCase() *liquidity_provider.SetCredentialsUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetCredentialsUseCase")
	}

	var r0 *liquidity_provider.SetCredentialsUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.SetCredentialsUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.SetCredentialsUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_SetCredentialsUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCredentialsUseCase'
type UseCaseRegistryMock_SetCredentialsUseCase_Call struct {
	*mock.Call
}

// SetCredentialsUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) SetCredentialsUseCase() *UseCaseRegistryMock_SetCredentialsUseCase_Call {
	return &UseCaseRegistryMock_SetCredentialsUseCase_Call{Call: _e.mock.On("SetCredentialsUseCase")}
}

func (_c *UseCaseRegistryMock_SetCredentialsUseCase_Call) Run(run func()) *UseCaseRegistryMock_SetCredentialsUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_SetCredentialsUseCase_Call) Return(_a0 *liquidity_provider.SetCredentialsUseCase) *UseCaseRegistryMock_SetCredentialsUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_SetCredentialsUseCase_Call) RunAndReturn(run func() *liquidity_provider.SetCredentialsUseCase) *UseCaseRegistryMock_SetCredentialsUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// SetGeneralConfigUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) SetGeneralConfigUseCase() *liquidity_provider.SetGeneralConfigUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetGeneralConfigUseCase")
	}

	var r0 *liquidity_provider.SetGeneralConfigUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.SetGeneralConfigUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.SetGeneralConfigUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_SetGeneralConfigUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGeneralConfigUseCase'
type UseCaseRegistryMock_SetGeneralConfigUseCase_Call struct {
	*mock.Call
}

// SetGeneralConfigUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) SetGeneralConfigUseCase() *UseCaseRegistryMock_SetGeneralConfigUseCase_Call {
	return &UseCaseRegistryMock_SetGeneralConfigUseCase_Call{Call: _e.mock.On("SetGeneralConfigUseCase")}
}

func (_c *UseCaseRegistryMock_SetGeneralConfigUseCase_Call) Run(run func()) *UseCaseRegistryMock_SetGeneralConfigUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_SetGeneralConfigUseCase_Call) Return(_a0 *liquidity_provider.SetGeneralConfigUseCase) *UseCaseRegistryMock_SetGeneralConfigUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_SetGeneralConfigUseCase_Call) RunAndReturn(run func() *liquidity_provider.SetGeneralConfigUseCase) *UseCaseRegistryMock_SetGeneralConfigUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// SetPeginConfigUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) SetPeginConfigUseCase() *liquidity_provider.SetPeginConfigUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetPeginConfigUseCase")
	}

	var r0 *liquidity_provider.SetPeginConfigUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.SetPeginConfigUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.SetPeginConfigUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_SetPeginConfigUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPeginConfigUseCase'
type UseCaseRegistryMock_SetPeginConfigUseCase_Call struct {
	*mock.Call
}

// SetPeginConfigUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) SetPeginConfigUseCase() *UseCaseRegistryMock_SetPeginConfigUseCase_Call {
	return &UseCaseRegistryMock_SetPeginConfigUseCase_Call{Call: _e.mock.On("SetPeginConfigUseCase")}
}

func (_c *UseCaseRegistryMock_SetPeginConfigUseCase_Call) Run(run func()) *UseCaseRegistryMock_SetPeginConfigUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_SetPeginConfigUseCase_Call) Return(_a0 *liquidity_provider.SetPeginConfigUseCase) *UseCaseRegistryMock_SetPeginConfigUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_SetPeginConfigUseCase_Call) RunAndReturn(run func() *liquidity_provider.SetPeginConfigUseCase) *UseCaseRegistryMock_SetPeginConfigUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// SetPegoutConfigUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) SetPegoutConfigUseCase() *liquidity_provider.SetPegoutConfigUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SetPegoutConfigUseCase")
	}

	var r0 *liquidity_provider.SetPegoutConfigUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.SetPegoutConfigUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.SetPegoutConfigUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_SetPegoutConfigUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPegoutConfigUseCase'
type UseCaseRegistryMock_SetPegoutConfigUseCase_Call struct {
	*mock.Call
}

// SetPegoutConfigUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) SetPegoutConfigUseCase() *UseCaseRegistryMock_SetPegoutConfigUseCase_Call {
	return &UseCaseRegistryMock_SetPegoutConfigUseCase_Call{Call: _e.mock.On("SetPegoutConfigUseCase")}
}

func (_c *UseCaseRegistryMock_SetPegoutConfigUseCase_Call) Run(run func()) *UseCaseRegistryMock_SetPegoutConfigUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_SetPegoutConfigUseCase_Call) Return(_a0 *liquidity_provider.SetPegoutConfigUseCase) *UseCaseRegistryMock_SetPegoutConfigUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_SetPegoutConfigUseCase_Call) RunAndReturn(run func() *liquidity_provider.SetPegoutConfigUseCase) *UseCaseRegistryMock_SetPegoutConfigUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawCollateralUseCase provides a mock function with given fields:
func (_m *UseCaseRegistryMock) WithdrawCollateralUseCase() *liquidity_provider.WithdrawCollateralUseCase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithdrawCollateralUseCase")
	}

	var r0 *liquidity_provider.WithdrawCollateralUseCase
	if rf, ok := ret.Get(0).(func() *liquidity_provider.WithdrawCollateralUseCase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.WithdrawCollateralUseCase)
		}
	}

	return r0
}

// UseCaseRegistryMock_WithdrawCollateralUseCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawCollateralUseCase'
type UseCaseRegistryMock_WithdrawCollateralUseCase_Call struct {
	*mock.Call
}

// WithdrawCollateralUseCase is a helper method to define mock.On call
func (_e *UseCaseRegistryMock_Expecter) WithdrawCollateralUseCase() *UseCaseRegistryMock_WithdrawCollateralUseCase_Call {
	return &UseCaseRegistryMock_WithdrawCollateralUseCase_Call{Call: _e.mock.On("WithdrawCollateralUseCase")}
}

func (_c *UseCaseRegistryMock_WithdrawCollateralUseCase_Call) Run(run func()) *UseCaseRegistryMock_WithdrawCollateralUseCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseRegistryMock_WithdrawCollateralUseCase_Call) Return(_a0 *liquidity_provider.WithdrawCollateralUseCase) *UseCaseRegistryMock_WithdrawCollateralUseCase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCaseRegistryMock_WithdrawCollateralUseCase_Call) RunAndReturn(run func() *liquidity_provider.WithdrawCollateralUseCase) *UseCaseRegistryMock_WithdrawCollateralUseCase_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCaseRegistryMock creates a new instance of UseCaseRegistryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCaseRegistryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCaseRegistryMock {
	mock := &UseCaseRegistryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
