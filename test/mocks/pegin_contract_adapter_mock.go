// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	bindings "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock/bindings"

	mock "github.com/stretchr/testify/mock"

	rootstock "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// PeginContractAdapterMock is an autogenerated mock type for the PeginContractAdapter type
type PeginContractAdapterMock struct {
	mock.Mock
}

type PeginContractAdapterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PeginContractAdapterMock) EXPECT() *PeginContractAdapterMock_Expecter {
	return &PeginContractAdapterMock_Expecter{mock: &_m.Mock}
}

// CallForUser provides a mock function with given fields: opts, quote
func (_m *PeginContractAdapterMock) CallForUser(opts *bind.TransactOpts, quote bindings.QuotesPegInQuote) (*types.Transaction, error) {
	ret := _m.Called(opts, quote)

	if len(ret) == 0 {
		panic("no return value specified for CallForUser")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPegInQuote) (*types.Transaction, error)); ok {
		return rf(opts, quote)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPegInQuote) *types.Transaction); ok {
		r0 = rf(opts, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, bindings.QuotesPegInQuote) error); ok {
		r1 = rf(opts, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractAdapterMock_CallForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallForUser'
type PeginContractAdapterMock_CallForUser_Call struct {
	*mock.Call
}

// CallForUser is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - quote bindings.QuotesPegInQuote
func (_e *PeginContractAdapterMock_Expecter) CallForUser(opts interface{}, quote interface{}) *PeginContractAdapterMock_CallForUser_Call {
	return &PeginContractAdapterMock_CallForUser_Call{Call: _e.mock.On("CallForUser", opts, quote)}
}

func (_c *PeginContractAdapterMock_CallForUser_Call) Run(run func(opts *bind.TransactOpts, quote bindings.QuotesPegInQuote)) *PeginContractAdapterMock_CallForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(bindings.QuotesPegInQuote))
	})
	return _c
}

func (_c *PeginContractAdapterMock_CallForUser_Call) Return(_a0 *types.Transaction, _a1 error) *PeginContractAdapterMock_CallForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractAdapterMock_CallForUser_Call) RunAndReturn(run func(*bind.TransactOpts, bindings.QuotesPegInQuote) (*types.Transaction, error)) *PeginContractAdapterMock_CallForUser_Call {
	_c.Call.Return(run)
	return _c
}

// Caller provides a mock function with no fields
func (_m *PeginContractAdapterMock) Caller() rootstock.ContractCallerBinding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Caller")
	}

	var r0 rootstock.ContractCallerBinding
	if rf, ok := ret.Get(0).(func() rootstock.ContractCallerBinding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rootstock.ContractCallerBinding)
		}
	}

	return r0
}

// PeginContractAdapterMock_Caller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Caller'
type PeginContractAdapterMock_Caller_Call struct {
	*mock.Call
}

// Caller is a helper method to define mock.On call
func (_e *PeginContractAdapterMock_Expecter) Caller() *PeginContractAdapterMock_Caller_Call {
	return &PeginContractAdapterMock_Caller_Call{Call: _e.mock.On("Caller")}
}

func (_c *PeginContractAdapterMock_Caller_Call) Run(run func()) *PeginContractAdapterMock_Caller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeginContractAdapterMock_Caller_Call) Return(_a0 rootstock.ContractCallerBinding) *PeginContractAdapterMock_Caller_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeginContractAdapterMock_Caller_Call) RunAndReturn(run func() rootstock.ContractCallerBinding) *PeginContractAdapterMock_Caller_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: opts, addr
func (_m *PeginContractAdapterMock) GetBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractAdapterMock_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type PeginContractAdapterMock_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *PeginContractAdapterMock_Expecter) GetBalance(opts interface{}, addr interface{}) *PeginContractAdapterMock_GetBalance_Call {
	return &PeginContractAdapterMock_GetBalance_Call{Call: _e.mock.On("GetBalance", opts, addr)}
}

func (_c *PeginContractAdapterMock_GetBalance_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *PeginContractAdapterMock_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *PeginContractAdapterMock_GetBalance_Call) Return(_a0 *big.Int, _a1 error) *PeginContractAdapterMock_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractAdapterMock_GetBalance_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *PeginContractAdapterMock_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeePercentage provides a mock function with given fields: opts
func (_m *PeginContractAdapterMock) GetFeePercentage(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetFeePercentage")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractAdapterMock_GetFeePercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeePercentage'
type PeginContractAdapterMock_GetFeePercentage_Call struct {
	*mock.Call
}

// GetFeePercentage is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *PeginContractAdapterMock_Expecter) GetFeePercentage(opts interface{}) *PeginContractAdapterMock_GetFeePercentage_Call {
	return &PeginContractAdapterMock_GetFeePercentage_Call{Call: _e.mock.On("GetFeePercentage", opts)}
}

func (_c *PeginContractAdapterMock_GetFeePercentage_Call) Run(run func(opts *bind.CallOpts)) *PeginContractAdapterMock_GetFeePercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *PeginContractAdapterMock_GetFeePercentage_Call) Return(_a0 *big.Int, _a1 error) *PeginContractAdapterMock_GetFeePercentage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractAdapterMock_GetFeePercentage_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *PeginContractAdapterMock_GetFeePercentage_Call {
	_c.Call.Return(run)
	return _c
}

// HashPegInQuote provides a mock function with given fields: opts, quote
func (_m *PeginContractAdapterMock) HashPegInQuote(opts *bind.CallOpts, quote bindings.QuotesPegInQuote) ([32]byte, error) {
	ret := _m.Called(opts, quote)

	if len(ret) == 0 {
		panic("no return value specified for HashPegInQuote")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, bindings.QuotesPegInQuote) ([32]byte, error)); ok {
		return rf(opts, quote)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, bindings.QuotesPegInQuote) [32]byte); ok {
		r0 = rf(opts, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, bindings.QuotesPegInQuote) error); ok {
		r1 = rf(opts, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractAdapterMock_HashPegInQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPegInQuote'
type PeginContractAdapterMock_HashPegInQuote_Call struct {
	*mock.Call
}

// HashPegInQuote is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - quote bindings.QuotesPegInQuote
func (_e *PeginContractAdapterMock_Expecter) HashPegInQuote(opts interface{}, quote interface{}) *PeginContractAdapterMock_HashPegInQuote_Call {
	return &PeginContractAdapterMock_HashPegInQuote_Call{Call: _e.mock.On("HashPegInQuote", opts, quote)}
}

func (_c *PeginContractAdapterMock_HashPegInQuote_Call) Run(run func(opts *bind.CallOpts, quote bindings.QuotesPegInQuote)) *PeginContractAdapterMock_HashPegInQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(bindings.QuotesPegInQuote))
	})
	return _c
}

func (_c *PeginContractAdapterMock_HashPegInQuote_Call) Return(_a0 [32]byte, _a1 error) *PeginContractAdapterMock_HashPegInQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractAdapterMock_HashPegInQuote_Call) RunAndReturn(run func(*bind.CallOpts, bindings.QuotesPegInQuote) ([32]byte, error)) *PeginContractAdapterMock_HashPegInQuote_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPegIn provides a mock function with given fields: opts, quote, signature, btcRawTransaction, partialMerkleTree, height
func (_m *PeginContractAdapterMock) RegisterPegIn(opts *bind.TransactOpts, quote bindings.QuotesPegInQuote, signature []byte, btcRawTransaction []byte, partialMerkleTree []byte, height *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPegIn")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPegInQuote, []byte, []byte, []byte, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPegInQuote, []byte, []byte, []byte, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, bindings.QuotesPegInQuote, []byte, []byte, []byte, *big.Int) error); ok {
		r1 = rf(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractAdapterMock_RegisterPegIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPegIn'
type PeginContractAdapterMock_RegisterPegIn_Call struct {
	*mock.Call
}

// RegisterPegIn is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - quote bindings.QuotesPegInQuote
//   - signature []byte
//   - btcRawTransaction []byte
//   - partialMerkleTree []byte
//   - height *big.Int
func (_e *PeginContractAdapterMock_Expecter) RegisterPegIn(opts interface{}, quote interface{}, signature interface{}, btcRawTransaction interface{}, partialMerkleTree interface{}, height interface{}) *PeginContractAdapterMock_RegisterPegIn_Call {
	return &PeginContractAdapterMock_RegisterPegIn_Call{Call: _e.mock.On("RegisterPegIn", opts, quote, signature, btcRawTransaction, partialMerkleTree, height)}
}

func (_c *PeginContractAdapterMock_RegisterPegIn_Call) Run(run func(opts *bind.TransactOpts, quote bindings.QuotesPegInQuote, signature []byte, btcRawTransaction []byte, partialMerkleTree []byte, height *big.Int)) *PeginContractAdapterMock_RegisterPegIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(bindings.QuotesPegInQuote), args[2].([]byte), args[3].([]byte), args[4].([]byte), args[5].(*big.Int))
	})
	return _c
}

func (_c *PeginContractAdapterMock_RegisterPegIn_Call) Return(_a0 *types.Transaction, _a1 error) *PeginContractAdapterMock_RegisterPegIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractAdapterMock_RegisterPegIn_Call) RunAndReturn(run func(*bind.TransactOpts, bindings.QuotesPegInQuote, []byte, []byte, []byte, *big.Int) (*types.Transaction, error)) *PeginContractAdapterMock_RegisterPegIn_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeginContractAdapterMock creates a new instance of PeginContractAdapterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeginContractAdapterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeginContractAdapterMock {
	mock := &PeginContractAdapterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
