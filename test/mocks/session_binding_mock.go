// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo_drivermongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// SessionBindingMock is an autogenerated mock type for the SessionBinding type
type SessionBindingMock struct {
	mock.Mock
}

type SessionBindingMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionBindingMock) EXPECT() *SessionBindingMock_Expecter {
	return &SessionBindingMock_Expecter{mock: &_m.Mock}
}

// EndSession provides a mock function with given fields: _a0
func (_m *SessionBindingMock) EndSession(_a0 context.Context) {
	_m.Called(_a0)
}

// SessionBindingMock_EndSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndSession'
type SessionBindingMock_EndSession_Call struct {
	*mock.Call
}

// EndSession is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SessionBindingMock_Expecter) EndSession(_a0 interface{}) *SessionBindingMock_EndSession_Call {
	return &SessionBindingMock_EndSession_Call{Call: _e.mock.On("EndSession", _a0)}
}

func (_c *SessionBindingMock_EndSession_Call) Run(run func(_a0 context.Context)) *SessionBindingMock_EndSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SessionBindingMock_EndSession_Call) Return() *SessionBindingMock_EndSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *SessionBindingMock_EndSession_Call) RunAndReturn(run func(context.Context)) *SessionBindingMock_EndSession_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: ctx, fn, opts
func (_m *SessionBindingMock) WithTransaction(ctx context.Context, fn func(mongo_drivermongo.SessionContext) (interface{}, error), opts ...*options.TransactionOptions) (interface{}, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(mongo_drivermongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) (interface{}, error)); ok {
		return rf(ctx, fn, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(mongo_drivermongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) interface{}); ok {
		r0 = rf(ctx, fn, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(mongo_drivermongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) error); ok {
		r1 = rf(ctx, fn, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionBindingMock_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type SessionBindingMock_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(mongo_drivermongo.SessionContext)(interface{} , error)
//   - opts ...*options.TransactionOptions
func (_e *SessionBindingMock_Expecter) WithTransaction(ctx interface{}, fn interface{}, opts ...interface{}) *SessionBindingMock_WithTransaction_Call {
	return &SessionBindingMock_WithTransaction_Call{Call: _e.mock.On("WithTransaction",
		append([]interface{}{ctx, fn}, opts...)...)}
}

func (_c *SessionBindingMock_WithTransaction_Call) Run(run func(ctx context.Context, fn func(mongo_drivermongo.SessionContext) (interface{}, error), opts ...*options.TransactionOptions)) *SessionBindingMock_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.TransactionOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.TransactionOptions)
			}
		}
		run(args[0].(context.Context), args[1].(func(mongo_drivermongo.SessionContext) (interface{}, error)), variadicArgs...)
	})
	return _c
}

func (_c *SessionBindingMock_WithTransaction_Call) Return(_a0 interface{}, _a1 error) *SessionBindingMock_WithTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionBindingMock_WithTransaction_Call) RunAndReturn(run func(context.Context, func(mongo_drivermongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) (interface{}, error)) *SessionBindingMock_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionBindingMock creates a new instance of SessionBindingMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionBindingMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionBindingMock {
	mock := &SessionBindingMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
