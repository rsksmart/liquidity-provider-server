// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	blockchain "github.com/rsksmart/liquidity-provider-server/internal/entities/blockchain"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"

	mock "github.com/stretchr/testify/mock"

	usecases "github.com/rsksmart/liquidity-provider-server/internal/usecases"
)

// RecommendedPegoutUseCaseMock is an autogenerated mock type for the RecommendedPegoutUseCase type
type RecommendedPegoutUseCaseMock struct {
	mock.Mock
}

type RecommendedPegoutUseCaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RecommendedPegoutUseCaseMock) EXPECT() *RecommendedPegoutUseCaseMock_Expecter {
	return &RecommendedPegoutUseCaseMock_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, userBalance, destinationType
func (_m *RecommendedPegoutUseCaseMock) Run(ctx context.Context, userBalance *entities.Wei, destinationType blockchain.BtcAddressType) (usecases.RecommendedOperationResult, error) {
	ret := _m.Called(ctx, userBalance, destinationType)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 usecases.RecommendedOperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Wei, blockchain.BtcAddressType) (usecases.RecommendedOperationResult, error)); ok {
		return rf(ctx, userBalance, destinationType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Wei, blockchain.BtcAddressType) usecases.RecommendedOperationResult); ok {
		r0 = rf(ctx, userBalance, destinationType)
	} else {
		r0 = ret.Get(0).(usecases.RecommendedOperationResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Wei, blockchain.BtcAddressType) error); ok {
		r1 = rf(ctx, userBalance, destinationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecommendedPegoutUseCaseMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type RecommendedPegoutUseCaseMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - userBalance *entities.Wei
//   - destinationType blockchain.BtcAddressType
func (_e *RecommendedPegoutUseCaseMock_Expecter) Run(ctx interface{}, userBalance interface{}, destinationType interface{}) *RecommendedPegoutUseCaseMock_Run_Call {
	return &RecommendedPegoutUseCaseMock_Run_Call{Call: _e.mock.On("Run", ctx, userBalance, destinationType)}
}

func (_c *RecommendedPegoutUseCaseMock_Run_Call) Run(run func(ctx context.Context, userBalance *entities.Wei, destinationType blockchain.BtcAddressType)) *RecommendedPegoutUseCaseMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Wei), args[2].(blockchain.BtcAddressType))
	})
	return _c
}

func (_c *RecommendedPegoutUseCaseMock_Run_Call) Return(_a0 usecases.RecommendedOperationResult, _a1 error) *RecommendedPegoutUseCaseMock_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecommendedPegoutUseCaseMock_Run_Call) RunAndReturn(run func(context.Context, *entities.Wei, blockchain.BtcAddressType) (usecases.RecommendedOperationResult, error)) *RecommendedPegoutUseCaseMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecommendedPegoutUseCaseMock creates a new instance of RecommendedPegoutUseCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecommendedPegoutUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecommendedPegoutUseCaseMock {
	mock := &RecommendedPegoutUseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
