// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	blockchain "github.com/rsksmart/liquidity-provider-server/internal/entities/blockchain"

	context "context"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// RskSignerWalletMock is an autogenerated mock type for the RskSignerWallet type
type RskSignerWalletMock struct {
	mock.Mock
}

type RskSignerWalletMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RskSignerWalletMock) EXPECT() *RskSignerWalletMock_Expecter {
	return &RskSignerWalletMock_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *RskSignerWalletMock) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// RskSignerWalletMock_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type RskSignerWalletMock_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *RskSignerWalletMock_Expecter) Address() *RskSignerWalletMock_Address_Call {
	return &RskSignerWalletMock_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *RskSignerWalletMock_Address_Call) Run(run func()) *RskSignerWalletMock_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RskSignerWalletMock_Address_Call) Return(_a0 common.Address) *RskSignerWalletMock_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RskSignerWalletMock_Address_Call) RunAndReturn(run func() common.Address) *RskSignerWalletMock_Address_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx
func (_m *RskSignerWalletMock) GetBalance(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RskSignerWalletMock_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type RskSignerWalletMock_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RskSignerWalletMock_Expecter) GetBalance(ctx interface{}) *RskSignerWalletMock_GetBalance_Call {
	return &RskSignerWalletMock_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx)}
}

func (_c *RskSignerWalletMock_GetBalance_Call) Run(run func(ctx context.Context)) *RskSignerWalletMock_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RskSignerWalletMock_GetBalance_Call) Return(_a0 *entities.Wei, _a1 error) *RskSignerWalletMock_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RskSignerWalletMock_GetBalance_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *RskSignerWalletMock_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SendRbtc provides a mock function with given fields: ctx, config, toAddress
func (_m *RskSignerWalletMock) SendRbtc(ctx context.Context, config blockchain.TransactionConfig, toAddress string) (string, error) {
	ret := _m.Called(ctx, config, toAddress)

	if len(ret) == 0 {
		panic("no return value specified for SendRbtc")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, blockchain.TransactionConfig, string) (string, error)); ok {
		return rf(ctx, config, toAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, blockchain.TransactionConfig, string) string); ok {
		r0 = rf(ctx, config, toAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, blockchain.TransactionConfig, string) error); ok {
		r1 = rf(ctx, config, toAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RskSignerWalletMock_SendRbtc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRbtc'
type RskSignerWalletMock_SendRbtc_Call struct {
	*mock.Call
}

// SendRbtc is a helper method to define mock.On call
//   - ctx context.Context
//   - config blockchain.TransactionConfig
//   - toAddress string
func (_e *RskSignerWalletMock_Expecter) SendRbtc(ctx interface{}, config interface{}, toAddress interface{}) *RskSignerWalletMock_SendRbtc_Call {
	return &RskSignerWalletMock_SendRbtc_Call{Call: _e.mock.On("SendRbtc", ctx, config, toAddress)}
}

func (_c *RskSignerWalletMock_SendRbtc_Call) Run(run func(ctx context.Context, config blockchain.TransactionConfig, toAddress string)) *RskSignerWalletMock_SendRbtc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(blockchain.TransactionConfig), args[2].(string))
	})
	return _c
}

func (_c *RskSignerWalletMock_SendRbtc_Call) Return(_a0 string, _a1 error) *RskSignerWalletMock_SendRbtc_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RskSignerWalletMock_SendRbtc_Call) RunAndReturn(run func(context.Context, blockchain.TransactionConfig, string) (string, error)) *RskSignerWalletMock_SendRbtc_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: _a0, _a1
func (_m *RskSignerWalletMock) Sign(_a0 common.Address, _a1 *types.Transaction) (*types.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address, *types.Transaction) (*types.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(common.Address, *types.Transaction) *types.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Address, *types.Transaction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RskSignerWalletMock_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type RskSignerWalletMock_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 *types.Transaction
func (_e *RskSignerWalletMock_Expecter) Sign(_a0 interface{}, _a1 interface{}) *RskSignerWalletMock_Sign_Call {
	return &RskSignerWalletMock_Sign_Call{Call: _e.mock.On("Sign", _a0, _a1)}
}

func (_c *RskSignerWalletMock_Sign_Call) Run(run func(_a0 common.Address, _a1 *types.Transaction)) *RskSignerWalletMock_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(*types.Transaction))
	})
	return _c
}

func (_c *RskSignerWalletMock_Sign_Call) Return(_a0 *types.Transaction, _a1 error) *RskSignerWalletMock_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RskSignerWalletMock_Sign_Call) RunAndReturn(run func(common.Address, *types.Transaction) (*types.Transaction, error)) *RskSignerWalletMock_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// SignBytes provides a mock function with given fields: msg
func (_m *RskSignerWalletMock) SignBytes(msg []byte) ([]byte, error) {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SignBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RskSignerWalletMock_SignBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignBytes'
type RskSignerWalletMock_SignBytes_Call struct {
	*mock.Call
}

// SignBytes is a helper method to define mock.On call
//   - msg []byte
func (_e *RskSignerWalletMock_Expecter) SignBytes(msg interface{}) *RskSignerWalletMock_SignBytes_Call {
	return &RskSignerWalletMock_SignBytes_Call{Call: _e.mock.On("SignBytes", msg)}
}

func (_c *RskSignerWalletMock_SignBytes_Call) Run(run func(msg []byte)) *RskSignerWalletMock_SignBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *RskSignerWalletMock_SignBytes_Call) Return(_a0 []byte, _a1 error) *RskSignerWalletMock_SignBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RskSignerWalletMock_SignBytes_Call) RunAndReturn(run func([]byte) ([]byte, error)) *RskSignerWalletMock_SignBytes_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: signature, hash
func (_m *RskSignerWalletMock) Validate(signature string, hash string) bool {
	ret := _m.Called(signature, hash)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(signature, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RskSignerWalletMock_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type RskSignerWalletMock_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - signature string
//   - hash string
func (_e *RskSignerWalletMock_Expecter) Validate(signature interface{}, hash interface{}) *RskSignerWalletMock_Validate_Call {
	return &RskSignerWalletMock_Validate_Call{Call: _e.mock.On("Validate", signature, hash)}
}

func (_c *RskSignerWalletMock_Validate_Call) Run(run func(signature string, hash string)) *RskSignerWalletMock_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RskSignerWalletMock_Validate_Call) Return(_a0 bool) *RskSignerWalletMock_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RskSignerWalletMock_Validate_Call) RunAndReturn(run func(string, string) bool) *RskSignerWalletMock_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRskSignerWalletMock creates a new instance of RskSignerWalletMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRskSignerWalletMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RskSignerWalletMock {
	mock := &RskSignerWalletMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
