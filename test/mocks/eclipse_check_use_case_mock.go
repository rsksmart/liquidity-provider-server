// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EclipseCheckUseCaseMock is an autogenerated mock type for the EclipseCheckUseCase type
type EclipseCheckUseCaseMock struct {
	mock.Mock
}

type EclipseCheckUseCaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EclipseCheckUseCaseMock) EXPECT() *EclipseCheckUseCaseMock_Expecter {
	return &EclipseCheckUseCaseMock_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, nodeType
func (_m *EclipseCheckUseCaseMock) Run(ctx context.Context, nodeType string) error {
	ret := _m.Called(ctx, nodeType)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nodeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EclipseCheckUseCaseMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type EclipseCheckUseCaseMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeType string
func (_e *EclipseCheckUseCaseMock_Expecter) Run(ctx interface{}, nodeType interface{}) *EclipseCheckUseCaseMock_Run_Call {
	return &EclipseCheckUseCaseMock_Run_Call{Call: _e.mock.On("Run", ctx, nodeType)}
}

func (_c *EclipseCheckUseCaseMock_Run_Call) Run(run func(ctx context.Context, nodeType string)) *EclipseCheckUseCaseMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EclipseCheckUseCaseMock_Run_Call) Return(_a0 error) *EclipseCheckUseCaseMock_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EclipseCheckUseCaseMock_Run_Call) RunAndReturn(run func(context.Context, string) error) *EclipseCheckUseCaseMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewEclipseCheckUseCaseMock creates a new instance of EclipseCheckUseCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEclipseCheckUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EclipseCheckUseCaseMock {
	mock := &EclipseCheckUseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
