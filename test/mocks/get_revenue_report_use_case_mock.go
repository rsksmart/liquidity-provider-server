// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	reports "github.com/rsksmart/liquidity-provider-server/internal/usecases/reports"

	time "time"
)

// GetRevenueReportUseCaseMock is an autogenerated mock type for the GetRevenueReportUseCase type
type GetRevenueReportUseCaseMock struct {
	mock.Mock
}

type GetRevenueReportUseCaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GetRevenueReportUseCaseMock) EXPECT() *GetRevenueReportUseCaseMock_Expecter {
	return &GetRevenueReportUseCaseMock_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, startDate, endDate
func (_m *GetRevenueReportUseCaseMock) Run(ctx context.Context, startDate time.Time, endDate time.Time) (reports.GetRevenueReportResult, error) {
	ret := _m.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 reports.GetRevenueReportResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) (reports.GetRevenueReportResult, error)); ok {
		return rf(ctx, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) reports.GetRevenueReportResult); ok {
		r0 = rf(ctx, startDate, endDate)
	} else {
		r0 = ret.Get(0).(reports.GetRevenueReportResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevenueReportUseCaseMock_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type GetRevenueReportUseCaseMock_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate time.Time
//   - endDate time.Time
func (_e *GetRevenueReportUseCaseMock_Expecter) Run(ctx interface{}, startDate interface{}, endDate interface{}) *GetRevenueReportUseCaseMock_Run_Call {
	return &GetRevenueReportUseCaseMock_Run_Call{Call: _e.mock.On("Run", ctx, startDate, endDate)}
}

func (_c *GetRevenueReportUseCaseMock_Run_Call) Run(run func(ctx context.Context, startDate time.Time, endDate time.Time)) *GetRevenueReportUseCaseMock_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *GetRevenueReportUseCaseMock_Run_Call) Return(_a0 reports.GetRevenueReportResult, _a1 error) *GetRevenueReportUseCaseMock_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetRevenueReportUseCaseMock_Run_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) (reports.GetRevenueReportResult, error)) *GetRevenueReportUseCaseMock_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetRevenueReportUseCaseMock creates a new instance of GetRevenueReportUseCaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetRevenueReportUseCaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetRevenueReportUseCaseMock {
	mock := &GetRevenueReportUseCaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
