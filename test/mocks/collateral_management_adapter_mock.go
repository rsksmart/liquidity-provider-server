// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	bindings "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock/bindings"

	mock "github.com/stretchr/testify/mock"

	rootstock "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// CollateralManagementAdapterMock is an autogenerated mock type for the CollateralManagementAdapter type
type CollateralManagementAdapterMock struct {
	mock.Mock
}

type CollateralManagementAdapterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CollateralManagementAdapterMock) EXPECT() *CollateralManagementAdapterMock_Expecter {
	return &CollateralManagementAdapterMock_Expecter{mock: &_m.Mock}
}

// AddPegInCollateral provides a mock function with given fields: opts
func (_m *CollateralManagementAdapterMock) AddPegInCollateral(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AddPegInCollateral")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_AddPegInCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPegInCollateral'
type CollateralManagementAdapterMock_AddPegInCollateral_Call struct {
	*mock.Call
}

// AddPegInCollateral is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *CollateralManagementAdapterMock_Expecter) AddPegInCollateral(opts interface{}) *CollateralManagementAdapterMock_AddPegInCollateral_Call {
	return &CollateralManagementAdapterMock_AddPegInCollateral_Call{Call: _e.mock.On("AddPegInCollateral", opts)}
}

func (_c *CollateralManagementAdapterMock_AddPegInCollateral_Call) Run(run func(opts *bind.TransactOpts)) *CollateralManagementAdapterMock_AddPegInCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_AddPegInCollateral_Call) Return(_a0 *types.Transaction, _a1 error) *CollateralManagementAdapterMock_AddPegInCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_AddPegInCollateral_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *CollateralManagementAdapterMock_AddPegInCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// AddPegOutCollateral provides a mock function with given fields: opts
func (_m *CollateralManagementAdapterMock) AddPegOutCollateral(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AddPegOutCollateral")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_AddPegOutCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPegOutCollateral'
type CollateralManagementAdapterMock_AddPegOutCollateral_Call struct {
	*mock.Call
}

// AddPegOutCollateral is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *CollateralManagementAdapterMock_Expecter) AddPegOutCollateral(opts interface{}) *CollateralManagementAdapterMock_AddPegOutCollateral_Call {
	return &CollateralManagementAdapterMock_AddPegOutCollateral_Call{Call: _e.mock.On("AddPegOutCollateral", opts)}
}

func (_c *CollateralManagementAdapterMock_AddPegOutCollateral_Call) Run(run func(opts *bind.TransactOpts)) *CollateralManagementAdapterMock_AddPegOutCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_AddPegOutCollateral_Call) Return(_a0 *types.Transaction, _a1 error) *CollateralManagementAdapterMock_AddPegOutCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_AddPegOutCollateral_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *CollateralManagementAdapterMock_AddPegOutCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// Caller provides a mock function with no fields
func (_m *CollateralManagementAdapterMock) Caller() rootstock.ContractCallerBinding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Caller")
	}

	var r0 rootstock.ContractCallerBinding
	if rf, ok := ret.Get(0).(func() rootstock.ContractCallerBinding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rootstock.ContractCallerBinding)
		}
	}

	return r0
}

// CollateralManagementAdapterMock_Caller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Caller'
type CollateralManagementAdapterMock_Caller_Call struct {
	*mock.Call
}

// Caller is a helper method to define mock.On call
func (_e *CollateralManagementAdapterMock_Expecter) Caller() *CollateralManagementAdapterMock_Caller_Call {
	return &CollateralManagementAdapterMock_Caller_Call{Call: _e.mock.On("Caller")}
}

func (_c *CollateralManagementAdapterMock_Caller_Call) Run(run func()) *CollateralManagementAdapterMock_Caller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_Caller_Call) Return(_a0 rootstock.ContractCallerBinding) *CollateralManagementAdapterMock_Caller_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementAdapterMock_Caller_Call) RunAndReturn(run func() rootstock.ContractCallerBinding) *CollateralManagementAdapterMock_Caller_Call {
	_c.Call.Return(run)
	return _c
}

// FilterPenalized provides a mock function with given fields: opts, liquidityProvider, punisher, quoteHash
func (_m *CollateralManagementAdapterMock) FilterPenalized(opts *bind.FilterOpts, liquidityProvider []common.Address, punisher []common.Address, quoteHash [][32]byte) (*bindings.ICollateralManagementPenalizedIterator, error) {
	ret := _m.Called(opts, liquidityProvider, punisher, quoteHash)

	if len(ret) == 0 {
		panic("no return value specified for FilterPenalized")
	}

	var r0 *bindings.ICollateralManagementPenalizedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address, [][32]byte) (*bindings.ICollateralManagementPenalizedIterator, error)); ok {
		return rf(opts, liquidityProvider, punisher, quoteHash)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address, [][32]byte) *bindings.ICollateralManagementPenalizedIterator); ok {
		r0 = rf(opts, liquidityProvider, punisher, quoteHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.ICollateralManagementPenalizedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address, [][32]byte) error); ok {
		r1 = rf(opts, liquidityProvider, punisher, quoteHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_FilterPenalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterPenalized'
type CollateralManagementAdapterMock_FilterPenalized_Call struct {
	*mock.Call
}

// FilterPenalized is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - liquidityProvider []common.Address
//   - punisher []common.Address
//   - quoteHash [][32]byte
func (_e *CollateralManagementAdapterMock_Expecter) FilterPenalized(opts interface{}, liquidityProvider interface{}, punisher interface{}, quoteHash interface{}) *CollateralManagementAdapterMock_FilterPenalized_Call {
	return &CollateralManagementAdapterMock_FilterPenalized_Call{Call: _e.mock.On("FilterPenalized", opts, liquidityProvider, punisher, quoteHash)}
}

func (_c *CollateralManagementAdapterMock_FilterPenalized_Call) Run(run func(opts *bind.FilterOpts, liquidityProvider []common.Address, punisher []common.Address, quoteHash [][32]byte)) *CollateralManagementAdapterMock_FilterPenalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]common.Address), args[3].([][32]byte))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_FilterPenalized_Call) Return(_a0 *bindings.ICollateralManagementPenalizedIterator, _a1 error) *CollateralManagementAdapterMock_FilterPenalized_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_FilterPenalized_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []common.Address, [][32]byte) (*bindings.ICollateralManagementPenalizedIterator, error)) *CollateralManagementAdapterMock_FilterPenalized_Call {
	_c.Call.Return(run)
	return _c
}

// GetMinCollateral provides a mock function with given fields: opts
func (_m *CollateralManagementAdapterMock) GetMinCollateral(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetMinCollateral")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_GetMinCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinCollateral'
type CollateralManagementAdapterMock_GetMinCollateral_Call struct {
	*mock.Call
}

// GetMinCollateral is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *CollateralManagementAdapterMock_Expecter) GetMinCollateral(opts interface{}) *CollateralManagementAdapterMock_GetMinCollateral_Call {
	return &CollateralManagementAdapterMock_GetMinCollateral_Call{Call: _e.mock.On("GetMinCollateral", opts)}
}

func (_c *CollateralManagementAdapterMock_GetMinCollateral_Call) Run(run func(opts *bind.CallOpts)) *CollateralManagementAdapterMock_GetMinCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_GetMinCollateral_Call) Return(_a0 *big.Int, _a1 error) *CollateralManagementAdapterMock_GetMinCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_GetMinCollateral_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *CollateralManagementAdapterMock_GetMinCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegInCollateral provides a mock function with given fields: opts, addr
func (_m *CollateralManagementAdapterMock) GetPegInCollateral(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetPegInCollateral")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_GetPegInCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegInCollateral'
type CollateralManagementAdapterMock_GetPegInCollateral_Call struct {
	*mock.Call
}

// GetPegInCollateral is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *CollateralManagementAdapterMock_Expecter) GetPegInCollateral(opts interface{}, addr interface{}) *CollateralManagementAdapterMock_GetPegInCollateral_Call {
	return &CollateralManagementAdapterMock_GetPegInCollateral_Call{Call: _e.mock.On("GetPegInCollateral", opts, addr)}
}

func (_c *CollateralManagementAdapterMock_GetPegInCollateral_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *CollateralManagementAdapterMock_GetPegInCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_GetPegInCollateral_Call) Return(_a0 *big.Int, _a1 error) *CollateralManagementAdapterMock_GetPegInCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_GetPegInCollateral_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *CollateralManagementAdapterMock_GetPegInCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegOutCollateral provides a mock function with given fields: opts, addr
func (_m *CollateralManagementAdapterMock) GetPegOutCollateral(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetPegOutCollateral")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_GetPegOutCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegOutCollateral'
type CollateralManagementAdapterMock_GetPegOutCollateral_Call struct {
	*mock.Call
}

// GetPegOutCollateral is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *CollateralManagementAdapterMock_Expecter) GetPegOutCollateral(opts interface{}, addr interface{}) *CollateralManagementAdapterMock_GetPegOutCollateral_Call {
	return &CollateralManagementAdapterMock_GetPegOutCollateral_Call{Call: _e.mock.On("GetPegOutCollateral", opts, addr)}
}

func (_c *CollateralManagementAdapterMock_GetPegOutCollateral_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *CollateralManagementAdapterMock_GetPegOutCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_GetPegOutCollateral_Call) Return(_a0 *big.Int, _a1 error) *CollateralManagementAdapterMock_GetPegOutCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_GetPegOutCollateral_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *CollateralManagementAdapterMock_GetPegOutCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// PenalizedEventIteratorAdapter provides a mock function with given fields: rawIterator
func (_m *CollateralManagementAdapterMock) PenalizedEventIteratorAdapter(rawIterator *bindings.ICollateralManagementPenalizedIterator) rootstock.EventIteratorAdapter[bindings.ICollateralManagementPenalized] {
	ret := _m.Called(rawIterator)

	if len(ret) == 0 {
		panic("no return value specified for PenalizedEventIteratorAdapter")
	}

	var r0 rootstock.EventIteratorAdapter[bindings.ICollateralManagementPenalized]
	if rf, ok := ret.Get(0).(func(*bindings.ICollateralManagementPenalizedIterator) rootstock.EventIteratorAdapter[bindings.ICollateralManagementPenalized]); ok {
		r0 = rf(rawIterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rootstock.EventIteratorAdapter[bindings.ICollateralManagementPenalized])
		}
	}

	return r0
}

// CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PenalizedEventIteratorAdapter'
type CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call struct {
	*mock.Call
}

// PenalizedEventIteratorAdapter is a helper method to define mock.On call
//   - rawIterator *bindings.ICollateralManagementPenalizedIterator
func (_e *CollateralManagementAdapterMock_Expecter) PenalizedEventIteratorAdapter(rawIterator interface{}) *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call {
	return &CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call{Call: _e.mock.On("PenalizedEventIteratorAdapter", rawIterator)}
}

func (_c *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call) Run(run func(rawIterator *bindings.ICollateralManagementPenalizedIterator)) *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bindings.ICollateralManagementPenalizedIterator))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call) Return(_a0 rootstock.EventIteratorAdapter[bindings.ICollateralManagementPenalized]) *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call) RunAndReturn(run func(*bindings.ICollateralManagementPenalizedIterator) rootstock.EventIteratorAdapter[bindings.ICollateralManagementPenalized]) *CollateralManagementAdapterMock_PenalizedEventIteratorAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// Resign provides a mock function with given fields: opts
func (_m *CollateralManagementAdapterMock) Resign(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Resign")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_Resign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resign'
type CollateralManagementAdapterMock_Resign_Call struct {
	*mock.Call
}

// Resign is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *CollateralManagementAdapterMock_Expecter) Resign(opts interface{}) *CollateralManagementAdapterMock_Resign_Call {
	return &CollateralManagementAdapterMock_Resign_Call{Call: _e.mock.On("Resign", opts)}
}

func (_c *CollateralManagementAdapterMock_Resign_Call) Run(run func(opts *bind.TransactOpts)) *CollateralManagementAdapterMock_Resign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_Resign_Call) Return(_a0 *types.Transaction, _a1 error) *CollateralManagementAdapterMock_Resign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_Resign_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *CollateralManagementAdapterMock_Resign_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawCollateral provides a mock function with given fields: opts
func (_m *CollateralManagementAdapterMock) WithdrawCollateral(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawCollateral")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementAdapterMock_WithdrawCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawCollateral'
type CollateralManagementAdapterMock_WithdrawCollateral_Call struct {
	*mock.Call
}

// WithdrawCollateral is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *CollateralManagementAdapterMock_Expecter) WithdrawCollateral(opts interface{}) *CollateralManagementAdapterMock_WithdrawCollateral_Call {
	return &CollateralManagementAdapterMock_WithdrawCollateral_Call{Call: _e.mock.On("WithdrawCollateral", opts)}
}

func (_c *CollateralManagementAdapterMock_WithdrawCollateral_Call) Run(run func(opts *bind.TransactOpts)) *CollateralManagementAdapterMock_WithdrawCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *CollateralManagementAdapterMock_WithdrawCollateral_Call) Return(_a0 *types.Transaction, _a1 error) *CollateralManagementAdapterMock_WithdrawCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementAdapterMock_WithdrawCollateral_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *CollateralManagementAdapterMock_WithdrawCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollateralManagementAdapterMock creates a new instance of CollateralManagementAdapterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollateralManagementAdapterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollateralManagementAdapterMock {
	mock := &CollateralManagementAdapterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
