// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	bindings "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock/bindings"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// DiscoveryBindingMock is an autogenerated mock type for the DiscoveryBinding type
type DiscoveryBindingMock struct {
	mock.Mock
}

type DiscoveryBindingMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryBindingMock) EXPECT() *DiscoveryBindingMock_Expecter {
	return &DiscoveryBindingMock_Expecter{mock: &_m.Mock}
}

// GetProvider provides a mock function with given fields: opts, providerAddress
func (_m *DiscoveryBindingMock) GetProvider(opts *bind.CallOpts, providerAddress common.Address) (bindings.FlyoverLiquidityProvider, error) {
	ret := _m.Called(opts, providerAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 bindings.FlyoverLiquidityProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bindings.FlyoverLiquidityProvider, error)); ok {
		return rf(opts, providerAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bindings.FlyoverLiquidityProvider); ok {
		r0 = rf(opts, providerAddress)
	} else {
		r0 = ret.Get(0).(bindings.FlyoverLiquidityProvider)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, providerAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type DiscoveryBindingMock_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - providerAddress common.Address
func (_e *DiscoveryBindingMock_Expecter) GetProvider(opts interface{}, providerAddress interface{}) *DiscoveryBindingMock_GetProvider_Call {
	return &DiscoveryBindingMock_GetProvider_Call{Call: _e.mock.On("GetProvider", opts, providerAddress)}
}

func (_c *DiscoveryBindingMock_GetProvider_Call) Run(run func(opts *bind.CallOpts, providerAddress common.Address)) *DiscoveryBindingMock_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *DiscoveryBindingMock_GetProvider_Call) Return(_a0 bindings.FlyoverLiquidityProvider, _a1 error) *DiscoveryBindingMock_GetProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_GetProvider_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (bindings.FlyoverLiquidityProvider, error)) *DiscoveryBindingMock_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviders provides a mock function with given fields: opts
func (_m *DiscoveryBindingMock) GetProviders(opts *bind.CallOpts) ([]bindings.FlyoverLiquidityProvider, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 []bindings.FlyoverLiquidityProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]bindings.FlyoverLiquidityProvider, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []bindings.FlyoverLiquidityProvider); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bindings.FlyoverLiquidityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_GetProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviders'
type DiscoveryBindingMock_GetProviders_Call struct {
	*mock.Call
}

// GetProviders is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *DiscoveryBindingMock_Expecter) GetProviders(opts interface{}) *DiscoveryBindingMock_GetProviders_Call {
	return &DiscoveryBindingMock_GetProviders_Call{Call: _e.mock.On("GetProviders", opts)}
}

func (_c *DiscoveryBindingMock_GetProviders_Call) Run(run func(opts *bind.CallOpts)) *DiscoveryBindingMock_GetProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *DiscoveryBindingMock_GetProviders_Call) Return(_a0 []bindings.FlyoverLiquidityProvider, _a1 error) *DiscoveryBindingMock_GetProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_GetProviders_Call) RunAndReturn(run func(*bind.CallOpts) ([]bindings.FlyoverLiquidityProvider, error)) *DiscoveryBindingMock_GetProviders_Call {
	_c.Call.Return(run)
	return _c
}

// IsOperational provides a mock function with given fields: opts, providerType, addr
func (_m *DiscoveryBindingMock) IsOperational(opts *bind.CallOpts, providerType uint8, addr common.Address) (bool, error) {
	ret := _m.Called(opts, providerType, addr)

	if len(ret) == 0 {
		panic("no return value specified for IsOperational")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint8, common.Address) (bool, error)); ok {
		return rf(opts, providerType, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint8, common.Address) bool); ok {
		r0 = rf(opts, providerType, addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint8, common.Address) error); ok {
		r1 = rf(opts, providerType, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_IsOperational_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperational'
type DiscoveryBindingMock_IsOperational_Call struct {
	*mock.Call
}

// IsOperational is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - providerType uint8
//   - addr common.Address
func (_e *DiscoveryBindingMock_Expecter) IsOperational(opts interface{}, providerType interface{}, addr interface{}) *DiscoveryBindingMock_IsOperational_Call {
	return &DiscoveryBindingMock_IsOperational_Call{Call: _e.mock.On("IsOperational", opts, providerType, addr)}
}

func (_c *DiscoveryBindingMock_IsOperational_Call) Run(run func(opts *bind.CallOpts, providerType uint8, addr common.Address)) *DiscoveryBindingMock_IsOperational_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(uint8), args[2].(common.Address))
	})
	return _c
}

func (_c *DiscoveryBindingMock_IsOperational_Call) Return(_a0 bool, _a1 error) *DiscoveryBindingMock_IsOperational_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_IsOperational_Call) RunAndReturn(run func(*bind.CallOpts, uint8, common.Address) (bool, error)) *DiscoveryBindingMock_IsOperational_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRegister provides a mock function with given fields: log
func (_m *DiscoveryBindingMock) ParseRegister(log types.Log) (*bindings.IFlyoverDiscoveryRegister, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseRegister")
	}

	var r0 *bindings.IFlyoverDiscoveryRegister
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*bindings.IFlyoverDiscoveryRegister, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *bindings.IFlyoverDiscoveryRegister); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.IFlyoverDiscoveryRegister)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_ParseRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRegister'
type DiscoveryBindingMock_ParseRegister_Call struct {
	*mock.Call
}

// ParseRegister is a helper method to define mock.On call
//   - log types.Log
func (_e *DiscoveryBindingMock_Expecter) ParseRegister(log interface{}) *DiscoveryBindingMock_ParseRegister_Call {
	return &DiscoveryBindingMock_ParseRegister_Call{Call: _e.mock.On("ParseRegister", log)}
}

func (_c *DiscoveryBindingMock_ParseRegister_Call) Run(run func(log types.Log)) *DiscoveryBindingMock_ParseRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *DiscoveryBindingMock_ParseRegister_Call) Return(_a0 *bindings.IFlyoverDiscoveryRegister, _a1 error) *DiscoveryBindingMock_ParseRegister_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_ParseRegister_Call) RunAndReturn(run func(types.Log) (*bindings.IFlyoverDiscoveryRegister, error)) *DiscoveryBindingMock_ParseRegister_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: opts, name, apiBaseUrl, status, providerType
func (_m *DiscoveryBindingMock) Register(opts *bind.TransactOpts, name string, apiBaseUrl string, status bool, providerType uint8) (*types.Transaction, error) {
	ret := _m.Called(opts, name, apiBaseUrl, status, providerType)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, bool, uint8) (*types.Transaction, error)); ok {
		return rf(opts, name, apiBaseUrl, status, providerType)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, bool, uint8) *types.Transaction); ok {
		r0 = rf(opts, name, apiBaseUrl, status, providerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string, bool, uint8) error); ok {
		r1 = rf(opts, name, apiBaseUrl, status, providerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type DiscoveryBindingMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - name string
//   - apiBaseUrl string
//   - status bool
//   - providerType uint8
func (_e *DiscoveryBindingMock_Expecter) Register(opts interface{}, name interface{}, apiBaseUrl interface{}, status interface{}, providerType interface{}) *DiscoveryBindingMock_Register_Call {
	return &DiscoveryBindingMock_Register_Call{Call: _e.mock.On("Register", opts, name, apiBaseUrl, status, providerType)}
}

func (_c *DiscoveryBindingMock_Register_Call) Run(run func(opts *bind.TransactOpts, name string, apiBaseUrl string, status bool, providerType uint8)) *DiscoveryBindingMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string), args[2].(string), args[3].(bool), args[4].(uint8))
	})
	return _c
}

func (_c *DiscoveryBindingMock_Register_Call) Return(_a0 *types.Transaction, _a1 error) *DiscoveryBindingMock_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_Register_Call) RunAndReturn(run func(*bind.TransactOpts, string, string, bool, uint8) (*types.Transaction, error)) *DiscoveryBindingMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// SetProviderStatus provides a mock function with given fields: opts, _providerId, status
func (_m *DiscoveryBindingMock) SetProviderStatus(opts *bind.TransactOpts, _providerId *big.Int, status bool) (*types.Transaction, error) {
	ret := _m.Called(opts, _providerId, status)

	if len(ret) == 0 {
		panic("no return value specified for SetProviderStatus")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, bool) (*types.Transaction, error)); ok {
		return rf(opts, _providerId, status)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, bool) *types.Transaction); ok {
		r0 = rf(opts, _providerId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, bool) error); ok {
		r1 = rf(opts, _providerId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_SetProviderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProviderStatus'
type DiscoveryBindingMock_SetProviderStatus_Call struct {
	*mock.Call
}

// SetProviderStatus is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _providerId *big.Int
//   - status bool
func (_e *DiscoveryBindingMock_Expecter) SetProviderStatus(opts interface{}, _providerId interface{}, status interface{}) *DiscoveryBindingMock_SetProviderStatus_Call {
	return &DiscoveryBindingMock_SetProviderStatus_Call{Call: _e.mock.On("SetProviderStatus", opts, _providerId, status)}
}

func (_c *DiscoveryBindingMock_SetProviderStatus_Call) Run(run func(opts *bind.TransactOpts, _providerId *big.Int, status bool)) *DiscoveryBindingMock_SetProviderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(*big.Int), args[2].(bool))
	})
	return _c
}

func (_c *DiscoveryBindingMock_SetProviderStatus_Call) Return(_a0 *types.Transaction, _a1 error) *DiscoveryBindingMock_SetProviderStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_SetProviderStatus_Call) RunAndReturn(run func(*bind.TransactOpts, *big.Int, bool) (*types.Transaction, error)) *DiscoveryBindingMock_SetProviderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProvider provides a mock function with given fields: opts, _name, _url
func (_m *DiscoveryBindingMock) UpdateProvider(opts *bind.TransactOpts, _name string, _url string) (*types.Transaction, error) {
	ret := _m.Called(opts, _name, _url)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) (*types.Transaction, error)); ok {
		return rf(opts, _name, _url)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) *types.Transaction); ok {
		r0 = rf(opts, _name, _url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string) error); ok {
		r1 = rf(opts, _name, _url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryBindingMock_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'
type DiscoveryBindingMock_UpdateProvider_Call struct {
	*mock.Call
}

// UpdateProvider is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _name string
//   - _url string
func (_e *DiscoveryBindingMock_Expecter) UpdateProvider(opts interface{}, _name interface{}, _url interface{}) *DiscoveryBindingMock_UpdateProvider_Call {
	return &DiscoveryBindingMock_UpdateProvider_Call{Call: _e.mock.On("UpdateProvider", opts, _name, _url)}
}

func (_c *DiscoveryBindingMock_UpdateProvider_Call) Run(run func(opts *bind.TransactOpts, _name string, _url string)) *DiscoveryBindingMock_UpdateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DiscoveryBindingMock_UpdateProvider_Call) Return(_a0 *types.Transaction, _a1 error) *DiscoveryBindingMock_UpdateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryBindingMock_UpdateProvider_Call) RunAndReturn(run func(*bind.TransactOpts, string, string) (*types.Transaction, error)) *DiscoveryBindingMock_UpdateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewDiscoveryBindingMock creates a new instance of DiscoveryBindingMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoveryBindingMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoveryBindingMock {
	mock := &DiscoveryBindingMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
