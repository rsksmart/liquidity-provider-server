// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	liquidity_provider "github.com/rsksmart/liquidity-provider-server/internal/entities/liquidity_provider"

	mock "github.com/stretchr/testify/mock"
)

// LiquidityProviderRepositoryMock is an autogenerated mock type for the LiquidityProviderRepository type
type LiquidityProviderRepositoryMock struct {
	mock.Mock
}

type LiquidityProviderRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LiquidityProviderRepositoryMock) EXPECT() *LiquidityProviderRepositoryMock_Expecter {
	return &LiquidityProviderRepositoryMock_Expecter{mock: &_m.Mock}
}

// GetCredentials provides a mock function with given fields: ctx
func (_m *LiquidityProviderRepositoryMock) GetCredentials(ctx context.Context) (*entities.Signed[liquidity_provider.HashedCredentials], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 *entities.Signed[liquidity_provider.HashedCredentials]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Signed[liquidity_provider.HashedCredentials], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Signed[liquidity_provider.HashedCredentials]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Signed[liquidity_provider.HashedCredentials])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidityProviderRepositoryMock_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type LiquidityProviderRepositoryMock_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LiquidityProviderRepositoryMock_Expecter) GetCredentials(ctx interface{}) *LiquidityProviderRepositoryMock_GetCredentials_Call {
	return &LiquidityProviderRepositoryMock_GetCredentials_Call{Call: _e.mock.On("GetCredentials", ctx)}
}

func (_c *LiquidityProviderRepositoryMock_GetCredentials_Call) Run(run func(ctx context.Context)) *LiquidityProviderRepositoryMock_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetCredentials_Call) Return(_a0 *entities.Signed[liquidity_provider.HashedCredentials], _a1 error) *LiquidityProviderRepositoryMock_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetCredentials_Call) RunAndReturn(run func(context.Context) (*entities.Signed[liquidity_provider.HashedCredentials], error)) *LiquidityProviderRepositoryMock_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetGeneralConfiguration provides a mock function with given fields: ctx
func (_m *LiquidityProviderRepositoryMock) GetGeneralConfiguration(ctx context.Context) (*entities.Signed[liquidity_provider.GeneralConfiguration], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGeneralConfiguration")
	}

	var r0 *entities.Signed[liquidity_provider.GeneralConfiguration]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Signed[liquidity_provider.GeneralConfiguration], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Signed[liquidity_provider.GeneralConfiguration]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Signed[liquidity_provider.GeneralConfiguration])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeneralConfiguration'
type LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call struct {
	*mock.Call
}

// GetGeneralConfiguration is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LiquidityProviderRepositoryMock_Expecter) GetGeneralConfiguration(ctx interface{}) *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call {
	return &LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call{Call: _e.mock.On("GetGeneralConfiguration", ctx)}
}

func (_c *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call) Run(run func(ctx context.Context)) *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call) Return(_a0 *entities.Signed[liquidity_provider.GeneralConfiguration], _a1 error) *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call) RunAndReturn(run func(context.Context) (*entities.Signed[liquidity_provider.GeneralConfiguration], error)) *LiquidityProviderRepositoryMock_GetGeneralConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeginConfiguration provides a mock function with given fields: ctx
func (_m *LiquidityProviderRepositoryMock) GetPeginConfiguration(ctx context.Context) (*entities.Signed[liquidity_provider.PeginConfiguration], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPeginConfiguration")
	}

	var r0 *entities.Signed[liquidity_provider.PeginConfiguration]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Signed[liquidity_provider.PeginConfiguration], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Signed[liquidity_provider.PeginConfiguration]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Signed[liquidity_provider.PeginConfiguration])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidityProviderRepositoryMock_GetPeginConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeginConfiguration'
type LiquidityProviderRepositoryMock_GetPeginConfiguration_Call struct {
	*mock.Call
}

// GetPeginConfiguration is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LiquidityProviderRepositoryMock_Expecter) GetPeginConfiguration(ctx interface{}) *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call {
	return &LiquidityProviderRepositoryMock_GetPeginConfiguration_Call{Call: _e.mock.On("GetPeginConfiguration", ctx)}
}

func (_c *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call) Run(run func(ctx context.Context)) *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call) Return(_a0 *entities.Signed[liquidity_provider.PeginConfiguration], _a1 error) *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call) RunAndReturn(run func(context.Context) (*entities.Signed[liquidity_provider.PeginConfiguration], error)) *LiquidityProviderRepositoryMock_GetPeginConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegoutConfiguration provides a mock function with given fields: ctx
func (_m *LiquidityProviderRepositoryMock) GetPegoutConfiguration(ctx context.Context) (*entities.Signed[liquidity_provider.PegoutConfiguration], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPegoutConfiguration")
	}

	var r0 *entities.Signed[liquidity_provider.PegoutConfiguration]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Signed[liquidity_provider.PegoutConfiguration], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Signed[liquidity_provider.PegoutConfiguration]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Signed[liquidity_provider.PegoutConfiguration])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegoutConfiguration'
type LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call struct {
	*mock.Call
}

// GetPegoutConfiguration is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LiquidityProviderRepositoryMock_Expecter) GetPegoutConfiguration(ctx interface{}) *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call {
	return &LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call{Call: _e.mock.On("GetPegoutConfiguration", ctx)}
}

func (_c *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call) Run(run func(ctx context.Context)) *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call) Return(_a0 *entities.Signed[liquidity_provider.PegoutConfiguration], _a1 error) *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call) RunAndReturn(run func(context.Context) (*entities.Signed[liquidity_provider.PegoutConfiguration], error)) *LiquidityProviderRepositoryMock_GetPegoutConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCredentials provides a mock function with given fields: ctx, credentials
func (_m *LiquidityProviderRepositoryMock) UpsertCredentials(ctx context.Context, credentials entities.Signed[liquidity_provider.HashedCredentials]) error {
	ret := _m.Called(ctx, credentials)

	if len(ret) == 0 {
		panic("no return value specified for UpsertCredentials")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signed[liquidity_provider.HashedCredentials]) error); ok {
		r0 = rf(ctx, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LiquidityProviderRepositoryMock_UpsertCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCredentials'
type LiquidityProviderRepositoryMock_UpsertCredentials_Call struct {
	*mock.Call
}

// UpsertCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - credentials entities.Signed[liquidity_provider.HashedCredentials]
func (_e *LiquidityProviderRepositoryMock_Expecter) UpsertCredentials(ctx interface{}, credentials interface{}) *LiquidityProviderRepositoryMock_UpsertCredentials_Call {
	return &LiquidityProviderRepositoryMock_UpsertCredentials_Call{Call: _e.mock.On("UpsertCredentials", ctx, credentials)}
}

func (_c *LiquidityProviderRepositoryMock_UpsertCredentials_Call) Run(run func(ctx context.Context, credentials entities.Signed[liquidity_provider.HashedCredentials])) *LiquidityProviderRepositoryMock_UpsertCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Signed[liquidity_provider.HashedCredentials]))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertCredentials_Call) Return(_a0 error) *LiquidityProviderRepositoryMock_UpsertCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertCredentials_Call) RunAndReturn(run func(context.Context, entities.Signed[liquidity_provider.HashedCredentials]) error) *LiquidityProviderRepositoryMock_UpsertCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertGeneralConfiguration provides a mock function with given fields: ctx, configuration
func (_m *LiquidityProviderRepositoryMock) UpsertGeneralConfiguration(ctx context.Context, configuration entities.Signed[liquidity_provider.GeneralConfiguration]) error {
	ret := _m.Called(ctx, configuration)

	if len(ret) == 0 {
		panic("no return value specified for UpsertGeneralConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signed[liquidity_provider.GeneralConfiguration]) error); ok {
		r0 = rf(ctx, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertGeneralConfiguration'
type LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call struct {
	*mock.Call
}

// UpsertGeneralConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configuration entities.Signed[liquidity_provider.GeneralConfiguration]
func (_e *LiquidityProviderRepositoryMock_Expecter) UpsertGeneralConfiguration(ctx interface{}, configuration interface{}) *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call {
	return &LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call{Call: _e.mock.On("UpsertGeneralConfiguration", ctx, configuration)}
}

func (_c *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call) Run(run func(ctx context.Context, configuration entities.Signed[liquidity_provider.GeneralConfiguration])) *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Signed[liquidity_provider.GeneralConfiguration]))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call) Return(_a0 error) *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call) RunAndReturn(run func(context.Context, entities.Signed[liquidity_provider.GeneralConfiguration]) error) *LiquidityProviderRepositoryMock_UpsertGeneralConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPeginConfiguration provides a mock function with given fields: ctx, configuration
func (_m *LiquidityProviderRepositoryMock) UpsertPeginConfiguration(ctx context.Context, configuration entities.Signed[liquidity_provider.PeginConfiguration]) error {
	ret := _m.Called(ctx, configuration)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPeginConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signed[liquidity_provider.PeginConfiguration]) error); ok {
		r0 = rf(ctx, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPeginConfiguration'
type LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call struct {
	*mock.Call
}

// UpsertPeginConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configuration entities.Signed[liquidity_provider.PeginConfiguration]
func (_e *LiquidityProviderRepositoryMock_Expecter) UpsertPeginConfiguration(ctx interface{}, configuration interface{}) *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call {
	return &LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call{Call: _e.mock.On("UpsertPeginConfiguration", ctx, configuration)}
}

func (_c *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call) Run(run func(ctx context.Context, configuration entities.Signed[liquidity_provider.PeginConfiguration])) *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Signed[liquidity_provider.PeginConfiguration]))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call) Return(_a0 error) *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call) RunAndReturn(run func(context.Context, entities.Signed[liquidity_provider.PeginConfiguration]) error) *LiquidityProviderRepositoryMock_UpsertPeginConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPegoutConfiguration provides a mock function with given fields: ctx, configuration
func (_m *LiquidityProviderRepositoryMock) UpsertPegoutConfiguration(ctx context.Context, configuration entities.Signed[liquidity_provider.PegoutConfiguration]) error {
	ret := _m.Called(ctx, configuration)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPegoutConfiguration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signed[liquidity_provider.PegoutConfiguration]) error); ok {
		r0 = rf(ctx, configuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPegoutConfiguration'
type LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call struct {
	*mock.Call
}

// UpsertPegoutConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configuration entities.Signed[liquidity_provider.PegoutConfiguration]
func (_e *LiquidityProviderRepositoryMock_Expecter) UpsertPegoutConfiguration(ctx interface{}, configuration interface{}) *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call {
	return &LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call{Call: _e.mock.On("UpsertPegoutConfiguration", ctx, configuration)}
}

func (_c *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call) Run(run func(ctx context.Context, configuration entities.Signed[liquidity_provider.PegoutConfiguration])) *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Signed[liquidity_provider.PegoutConfiguration]))
	})
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call) Return(_a0 error) *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call) RunAndReturn(run func(context.Context, entities.Signed[liquidity_provider.PegoutConfiguration]) error) *LiquidityProviderRepositoryMock_UpsertPegoutConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// NewLiquidityProviderRepositoryMock creates a new instance of LiquidityProviderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLiquidityProviderRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LiquidityProviderRepositoryMock {
	mock := &LiquidityProviderRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
