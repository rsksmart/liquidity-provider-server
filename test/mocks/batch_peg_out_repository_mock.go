// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	rootstock "github.com/rsksmart/liquidity-provider-server/internal/entities/rootstock"
	mock "github.com/stretchr/testify/mock"
)

// BatchPegOutRepositoryMock is an autogenerated mock type for the BatchPegOutRepository type
type BatchPegOutRepositoryMock struct {
	mock.Mock
}

type BatchPegOutRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchPegOutRepositoryMock) EXPECT() *BatchPegOutRepositoryMock_Expecter {
	return &BatchPegOutRepositoryMock_Expecter{mock: &_m.Mock}
}

// UpsertBatch provides a mock function with given fields: _a0, batch
func (_m *BatchPegOutRepositoryMock) UpsertBatch(_a0 context.Context, batch rootstock.BatchPegOut) error {
	ret := _m.Called(_a0, batch)

	if len(ret) == 0 {
		panic("no return value specified for UpsertBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, rootstock.BatchPegOut) error); ok {
		r0 = rf(_a0, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchPegOutRepositoryMock_UpsertBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertBatch'
type BatchPegOutRepositoryMock_UpsertBatch_Call struct {
	*mock.Call
}

// UpsertBatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - batch rootstock.BatchPegOut
func (_e *BatchPegOutRepositoryMock_Expecter) UpsertBatch(_a0 interface{}, batch interface{}) *BatchPegOutRepositoryMock_UpsertBatch_Call {
	return &BatchPegOutRepositoryMock_UpsertBatch_Call{Call: _e.mock.On("UpsertBatch", _a0, batch)}
}

func (_c *BatchPegOutRepositoryMock_UpsertBatch_Call) Run(run func(_a0 context.Context, batch rootstock.BatchPegOut)) *BatchPegOutRepositoryMock_UpsertBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(rootstock.BatchPegOut))
	})
	return _c
}

func (_c *BatchPegOutRepositoryMock_UpsertBatch_Call) Return(_a0 error) *BatchPegOutRepositoryMock_UpsertBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BatchPegOutRepositoryMock_UpsertBatch_Call) RunAndReturn(run func(context.Context, rootstock.BatchPegOut) error) *BatchPegOutRepositoryMock_UpsertBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatchPegOutRepositoryMock creates a new instance of BatchPegOutRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchPegOutRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchPegOutRepositoryMock {
	mock := &BatchPegOutRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
