// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	penalization "github.com/rsksmart/liquidity-provider-server/internal/entities/penalization"
	mock "github.com/stretchr/testify/mock"
)

// PenalizedEventRepositoryMock is an autogenerated mock type for the PenalizedEventRepository type
type PenalizedEventRepositoryMock struct {
	mock.Mock
}

type PenalizedEventRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PenalizedEventRepositoryMock) EXPECT() *PenalizedEventRepositoryMock_Expecter {
	return &PenalizedEventRepositoryMock_Expecter{mock: &_m.Mock}
}

// GetPenalizationsByQuoteHashes provides a mock function with given fields: ctx, quoteHashes
func (_m *PenalizedEventRepositoryMock) GetPenalizationsByQuoteHashes(ctx context.Context, quoteHashes []string) ([]penalization.PenalizedEvent, error) {
	ret := _m.Called(ctx, quoteHashes)

	if len(ret) == 0 {
		panic("no return value specified for GetPenalizationsByQuoteHashes")
	}

	var r0 []penalization.PenalizedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]penalization.PenalizedEvent, error)); ok {
		return rf(ctx, quoteHashes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []penalization.PenalizedEvent); ok {
		r0 = rf(ctx, quoteHashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]penalization.PenalizedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, quoteHashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPenalizationsByQuoteHashes'
type PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call struct {
	*mock.Call
}

// GetPenalizationsByQuoteHashes is a helper method to define mock.On call
//   - ctx context.Context
//   - quoteHashes []string
func (_e *PenalizedEventRepositoryMock_Expecter) GetPenalizationsByQuoteHashes(ctx interface{}, quoteHashes interface{}) *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call {
	return &PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call{Call: _e.mock.On("GetPenalizationsByQuoteHashes", ctx, quoteHashes)}
}

func (_c *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call) Run(run func(ctx context.Context, quoteHashes []string)) *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call) Return(_a0 []penalization.PenalizedEvent, _a1 error) *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call) RunAndReturn(run func(context.Context, []string) ([]penalization.PenalizedEvent, error)) *PenalizedEventRepositoryMock_GetPenalizationsByQuoteHashes_Call {
	_c.Call.Return(run)
	return _c
}

// InsertPenalization provides a mock function with given fields: ctx, event
func (_m *PenalizedEventRepositoryMock) InsertPenalization(ctx context.Context, event penalization.PenalizedEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for InsertPenalization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, penalization.PenalizedEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PenalizedEventRepositoryMock_InsertPenalization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPenalization'
type PenalizedEventRepositoryMock_InsertPenalization_Call struct {
	*mock.Call
}

// InsertPenalization is a helper method to define mock.On call
//   - ctx context.Context
//   - event penalization.PenalizedEvent
func (_e *PenalizedEventRepositoryMock_Expecter) InsertPenalization(ctx interface{}, event interface{}) *PenalizedEventRepositoryMock_InsertPenalization_Call {
	return &PenalizedEventRepositoryMock_InsertPenalization_Call{Call: _e.mock.On("InsertPenalization", ctx, event)}
}

func (_c *PenalizedEventRepositoryMock_InsertPenalization_Call) Run(run func(ctx context.Context, event penalization.PenalizedEvent)) *PenalizedEventRepositoryMock_InsertPenalization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(penalization.PenalizedEvent))
	})
	return _c
}

func (_c *PenalizedEventRepositoryMock_InsertPenalization_Call) Return(_a0 error) *PenalizedEventRepositoryMock_InsertPenalization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PenalizedEventRepositoryMock_InsertPenalization_Call) RunAndReturn(run func(context.Context, penalization.PenalizedEvent) error) *PenalizedEventRepositoryMock_InsertPenalization_Call {
	_c.Call.Return(run)
	return _c
}

// NewPenalizedEventRepositoryMock creates a new instance of PenalizedEventRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPenalizedEventRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PenalizedEventRepositoryMock {
	mock := &PenalizedEventRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
