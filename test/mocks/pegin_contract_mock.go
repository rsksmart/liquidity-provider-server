// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	blockchain "github.com/rsksmart/liquidity-provider-server/internal/entities/blockchain"

	mock "github.com/stretchr/testify/mock"

	quote "github.com/rsksmart/liquidity-provider-server/internal/entities/quote"
)

// PeginContractMock is an autogenerated mock type for the PeginContract type
type PeginContractMock struct {
	mock.Mock
}

type PeginContractMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PeginContractMock) EXPECT() *PeginContractMock_Expecter {
	return &PeginContractMock_Expecter{mock: &_m.Mock}
}

// CallForUser provides a mock function with given fields: txConfig, peginQuote
func (_m *PeginContractMock) CallForUser(txConfig blockchain.TransactionConfig, peginQuote quote.PeginQuote) (string, error) {
	ret := _m.Called(txConfig, peginQuote)

	if len(ret) == 0 {
		panic("no return value specified for CallForUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(blockchain.TransactionConfig, quote.PeginQuote) (string, error)); ok {
		return rf(txConfig, peginQuote)
	}
	if rf, ok := ret.Get(0).(func(blockchain.TransactionConfig, quote.PeginQuote) string); ok {
		r0 = rf(txConfig, peginQuote)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(blockchain.TransactionConfig, quote.PeginQuote) error); ok {
		r1 = rf(txConfig, peginQuote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractMock_CallForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallForUser'
type PeginContractMock_CallForUser_Call struct {
	*mock.Call
}

// CallForUser is a helper method to define mock.On call
//   - txConfig blockchain.TransactionConfig
//   - peginQuote quote.PeginQuote
func (_e *PeginContractMock_Expecter) CallForUser(txConfig interface{}, peginQuote interface{}) *PeginContractMock_CallForUser_Call {
	return &PeginContractMock_CallForUser_Call{Call: _e.mock.On("CallForUser", txConfig, peginQuote)}
}

func (_c *PeginContractMock_CallForUser_Call) Run(run func(txConfig blockchain.TransactionConfig, peginQuote quote.PeginQuote)) *PeginContractMock_CallForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(blockchain.TransactionConfig), args[1].(quote.PeginQuote))
	})
	return _c
}

func (_c *PeginContractMock_CallForUser_Call) Return(_a0 string, _a1 error) *PeginContractMock_CallForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractMock_CallForUser_Call) RunAndReturn(run func(blockchain.TransactionConfig, quote.PeginQuote) (string, error)) *PeginContractMock_CallForUser_Call {
	_c.Call.Return(run)
	return _c
}

// DaoFeePercentage provides a mock function with no fields
func (_m *PeginContractMock) DaoFeePercentage() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DaoFeePercentage")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractMock_DaoFeePercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DaoFeePercentage'
type PeginContractMock_DaoFeePercentage_Call struct {
	*mock.Call
}

// DaoFeePercentage is a helper method to define mock.On call
func (_e *PeginContractMock_Expecter) DaoFeePercentage() *PeginContractMock_DaoFeePercentage_Call {
	return &PeginContractMock_DaoFeePercentage_Call{Call: _e.mock.On("DaoFeePercentage")}
}

func (_c *PeginContractMock_DaoFeePercentage_Call) Run(run func()) *PeginContractMock_DaoFeePercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeginContractMock_DaoFeePercentage_Call) Return(_a0 uint64, _a1 error) *PeginContractMock_DaoFeePercentage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractMock_DaoFeePercentage_Call) RunAndReturn(run func() (uint64, error)) *PeginContractMock_DaoFeePercentage_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddress provides a mock function with no fields
func (_m *PeginContractMock) GetAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PeginContractMock_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type PeginContractMock_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *PeginContractMock_Expecter) GetAddress() *PeginContractMock_GetAddress_Call {
	return &PeginContractMock_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *PeginContractMock_GetAddress_Call) Run(run func()) *PeginContractMock_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PeginContractMock_GetAddress_Call) Return(_a0 string) *PeginContractMock_GetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeginContractMock_GetAddress_Call) RunAndReturn(run func() string) *PeginContractMock_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: address
func (_m *PeginContractMock) GetBalance(address string) (*entities.Wei, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Wei, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Wei); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractMock_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type PeginContractMock_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - address string
func (_e *PeginContractMock_Expecter) GetBalance(address interface{}) *PeginContractMock_GetBalance_Call {
	return &PeginContractMock_GetBalance_Call{Call: _e.mock.On("GetBalance", address)}
}

func (_c *PeginContractMock_GetBalance_Call) Run(run func(address string)) *PeginContractMock_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PeginContractMock_GetBalance_Call) Return(_a0 *entities.Wei, _a1 error) *PeginContractMock_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractMock_GetBalance_Call) RunAndReturn(run func(string) (*entities.Wei, error)) *PeginContractMock_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// HashPeginQuote provides a mock function with given fields: peginQuote
func (_m *PeginContractMock) HashPeginQuote(peginQuote quote.PeginQuote) (string, error) {
	ret := _m.Called(peginQuote)

	if len(ret) == 0 {
		panic("no return value specified for HashPeginQuote")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(quote.PeginQuote) (string, error)); ok {
		return rf(peginQuote)
	}
	if rf, ok := ret.Get(0).(func(quote.PeginQuote) string); ok {
		r0 = rf(peginQuote)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(quote.PeginQuote) error); ok {
		r1 = rf(peginQuote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractMock_HashPeginQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPeginQuote'
type PeginContractMock_HashPeginQuote_Call struct {
	*mock.Call
}

// HashPeginQuote is a helper method to define mock.On call
//   - peginQuote quote.PeginQuote
func (_e *PeginContractMock_Expecter) HashPeginQuote(peginQuote interface{}) *PeginContractMock_HashPeginQuote_Call {
	return &PeginContractMock_HashPeginQuote_Call{Call: _e.mock.On("HashPeginQuote", peginQuote)}
}

func (_c *PeginContractMock_HashPeginQuote_Call) Run(run func(peginQuote quote.PeginQuote)) *PeginContractMock_HashPeginQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(quote.PeginQuote))
	})
	return _c
}

func (_c *PeginContractMock_HashPeginQuote_Call) Return(_a0 string, _a1 error) *PeginContractMock_HashPeginQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractMock_HashPeginQuote_Call) RunAndReturn(run func(quote.PeginQuote) (string, error)) *PeginContractMock_HashPeginQuote_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPegin provides a mock function with given fields: params
func (_m *PeginContractMock) RegisterPegin(params blockchain.RegisterPeginParams) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPegin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(blockchain.RegisterPeginParams) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(blockchain.RegisterPeginParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(blockchain.RegisterPeginParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeginContractMock_RegisterPegin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPegin'
type PeginContractMock_RegisterPegin_Call struct {
	*mock.Call
}

// RegisterPegin is a helper method to define mock.On call
//   - params blockchain.RegisterPeginParams
func (_e *PeginContractMock_Expecter) RegisterPegin(params interface{}) *PeginContractMock_RegisterPegin_Call {
	return &PeginContractMock_RegisterPegin_Call{Call: _e.mock.On("RegisterPegin", params)}
}

func (_c *PeginContractMock_RegisterPegin_Call) Run(run func(params blockchain.RegisterPeginParams)) *PeginContractMock_RegisterPegin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(blockchain.RegisterPeginParams))
	})
	return _c
}

func (_c *PeginContractMock_RegisterPegin_Call) Return(_a0 string, _a1 error) *PeginContractMock_RegisterPegin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeginContractMock_RegisterPegin_Call) RunAndReturn(run func(blockchain.RegisterPeginParams) (string, error)) *PeginContractMock_RegisterPegin_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeginContractMock creates a new instance of PeginContractMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeginContractMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeginContractMock {
	mock := &PeginContractMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
