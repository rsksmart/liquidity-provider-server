// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	blockchain "github.com/rsksmart/liquidity-provider-server/internal/entities/blockchain"
	liquidity_provider "github.com/rsksmart/liquidity-provider-server/internal/entities/liquidity_provider"

	mock "github.com/stretchr/testify/mock"
)

// DiscoveryContractMock is an autogenerated mock type for the DiscoveryContract type
type DiscoveryContractMock struct {
	mock.Mock
}

type DiscoveryContractMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryContractMock) EXPECT() *DiscoveryContractMock_Expecter {
	return &DiscoveryContractMock_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function with no fields
func (_m *DiscoveryContractMock) GetAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DiscoveryContractMock_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type DiscoveryContractMock_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *DiscoveryContractMock_Expecter) GetAddress() *DiscoveryContractMock_GetAddress_Call {
	return &DiscoveryContractMock_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *DiscoveryContractMock_GetAddress_Call) Run(run func()) *DiscoveryContractMock_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiscoveryContractMock_GetAddress_Call) Return(_a0 string) *DiscoveryContractMock_GetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryContractMock_GetAddress_Call) RunAndReturn(run func() string) *DiscoveryContractMock_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function with given fields: address
func (_m *DiscoveryContractMock) GetProvider(address string) (liquidity_provider.RegisteredLiquidityProvider, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 liquidity_provider.RegisteredLiquidityProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (liquidity_provider.RegisteredLiquidityProvider, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) liquidity_provider.RegisteredLiquidityProvider); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(liquidity_provider.RegisteredLiquidityProvider)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryContractMock_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type DiscoveryContractMock_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//   - address string
func (_e *DiscoveryContractMock_Expecter) GetProvider(address interface{}) *DiscoveryContractMock_GetProvider_Call {
	return &DiscoveryContractMock_GetProvider_Call{Call: _e.mock.On("GetProvider", address)}
}

func (_c *DiscoveryContractMock_GetProvider_Call) Run(run func(address string)) *DiscoveryContractMock_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DiscoveryContractMock_GetProvider_Call) Return(_a0 liquidity_provider.RegisteredLiquidityProvider, _a1 error) *DiscoveryContractMock_GetProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryContractMock_GetProvider_Call) RunAndReturn(run func(string) (liquidity_provider.RegisteredLiquidityProvider, error)) *DiscoveryContractMock_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviders provides a mock function with no fields
func (_m *DiscoveryContractMock) GetProviders() ([]liquidity_provider.RegisteredLiquidityProvider, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 []liquidity_provider.RegisteredLiquidityProvider
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]liquidity_provider.RegisteredLiquidityProvider, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []liquidity_provider.RegisteredLiquidityProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]liquidity_provider.RegisteredLiquidityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryContractMock_GetProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviders'
type DiscoveryContractMock_GetProviders_Call struct {
	*mock.Call
}

// GetProviders is a helper method to define mock.On call
func (_e *DiscoveryContractMock_Expecter) GetProviders() *DiscoveryContractMock_GetProviders_Call {
	return &DiscoveryContractMock_GetProviders_Call{Call: _e.mock.On("GetProviders")}
}

func (_c *DiscoveryContractMock_GetProviders_Call) Run(run func()) *DiscoveryContractMock_GetProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiscoveryContractMock_GetProviders_Call) Return(_a0 []liquidity_provider.RegisteredLiquidityProvider, _a1 error) *DiscoveryContractMock_GetProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryContractMock_GetProviders_Call) RunAndReturn(run func() ([]liquidity_provider.RegisteredLiquidityProvider, error)) *DiscoveryContractMock_GetProviders_Call {
	_c.Call.Return(run)
	return _c
}

// IsOperational provides a mock function with given fields: providerType, address
func (_m *DiscoveryContractMock) IsOperational(providerType liquidity_provider.ProviderType, address string) (bool, error) {
	ret := _m.Called(providerType, address)

	if len(ret) == 0 {
		panic("no return value specified for IsOperational")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(liquidity_provider.ProviderType, string) (bool, error)); ok {
		return rf(providerType, address)
	}
	if rf, ok := ret.Get(0).(func(liquidity_provider.ProviderType, string) bool); ok {
		r0 = rf(providerType, address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(liquidity_provider.ProviderType, string) error); ok {
		r1 = rf(providerType, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryContractMock_IsOperational_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperational'
type DiscoveryContractMock_IsOperational_Call struct {
	*mock.Call
}

// IsOperational is a helper method to define mock.On call
//   - providerType liquidity_provider.ProviderType
//   - address string
func (_e *DiscoveryContractMock_Expecter) IsOperational(providerType interface{}, address interface{}) *DiscoveryContractMock_IsOperational_Call {
	return &DiscoveryContractMock_IsOperational_Call{Call: _e.mock.On("IsOperational", providerType, address)}
}

func (_c *DiscoveryContractMock_IsOperational_Call) Run(run func(providerType liquidity_provider.ProviderType, address string)) *DiscoveryContractMock_IsOperational_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(liquidity_provider.ProviderType), args[1].(string))
	})
	return _c
}

func (_c *DiscoveryContractMock_IsOperational_Call) Return(_a0 bool, _a1 error) *DiscoveryContractMock_IsOperational_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryContractMock_IsOperational_Call) RunAndReturn(run func(liquidity_provider.ProviderType, string) (bool, error)) *DiscoveryContractMock_IsOperational_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterProvider provides a mock function with given fields: txConfig, params
func (_m *DiscoveryContractMock) RegisterProvider(txConfig blockchain.TransactionConfig, params blockchain.ProviderRegistrationParams) (int64, error) {
	ret := _m.Called(txConfig, params)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(blockchain.TransactionConfig, blockchain.ProviderRegistrationParams) (int64, error)); ok {
		return rf(txConfig, params)
	}
	if rf, ok := ret.Get(0).(func(blockchain.TransactionConfig, blockchain.ProviderRegistrationParams) int64); ok {
		r0 = rf(txConfig, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(blockchain.TransactionConfig, blockchain.ProviderRegistrationParams) error); ok {
		r1 = rf(txConfig, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryContractMock_RegisterProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProvider'
type DiscoveryContractMock_RegisterProvider_Call struct {
	*mock.Call
}

// RegisterProvider is a helper method to define mock.On call
//   - txConfig blockchain.TransactionConfig
//   - params blockchain.ProviderRegistrationParams
func (_e *DiscoveryContractMock_Expecter) RegisterProvider(txConfig interface{}, params interface{}) *DiscoveryContractMock_RegisterProvider_Call {
	return &DiscoveryContractMock_RegisterProvider_Call{Call: _e.mock.On("RegisterProvider", txConfig, params)}
}

func (_c *DiscoveryContractMock_RegisterProvider_Call) Run(run func(txConfig blockchain.TransactionConfig, params blockchain.ProviderRegistrationParams)) *DiscoveryContractMock_RegisterProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(blockchain.TransactionConfig), args[1].(blockchain.ProviderRegistrationParams))
	})
	return _c
}

func (_c *DiscoveryContractMock_RegisterProvider_Call) Return(_a0 int64, _a1 error) *DiscoveryContractMock_RegisterProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryContractMock_RegisterProvider_Call) RunAndReturn(run func(blockchain.TransactionConfig, blockchain.ProviderRegistrationParams) (int64, error)) *DiscoveryContractMock_RegisterProvider_Call {
	_c.Call.Return(run)
	return _c
}

// SetProviderStatus provides a mock function with given fields: id, newStatus
func (_m *DiscoveryContractMock) SetProviderStatus(id uint64, newStatus bool) error {
	ret := _m.Called(id, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for SetProviderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(id, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryContractMock_SetProviderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProviderStatus'
type DiscoveryContractMock_SetProviderStatus_Call struct {
	*mock.Call
}

// SetProviderStatus is a helper method to define mock.On call
//   - id uint64
//   - newStatus bool
func (_e *DiscoveryContractMock_Expecter) SetProviderStatus(id interface{}, newStatus interface{}) *DiscoveryContractMock_SetProviderStatus_Call {
	return &DiscoveryContractMock_SetProviderStatus_Call{Call: _e.mock.On("SetProviderStatus", id, newStatus)}
}

func (_c *DiscoveryContractMock_SetProviderStatus_Call) Run(run func(id uint64, newStatus bool)) *DiscoveryContractMock_SetProviderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool))
	})
	return _c
}

func (_c *DiscoveryContractMock_SetProviderStatus_Call) Return(_a0 error) *DiscoveryContractMock_SetProviderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DiscoveryContractMock_SetProviderStatus_Call) RunAndReturn(run func(uint64, bool) error) *DiscoveryContractMock_SetProviderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProvider provides a mock function with given fields: name, url
func (_m *DiscoveryContractMock) UpdateProvider(name string, url string) (string, error) {
	ret := _m.Called(name, url)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(name, url)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryContractMock_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'
type DiscoveryContractMock_UpdateProvider_Call struct {
	*mock.Call
}

// UpdateProvider is a helper method to define mock.On call
//   - name string
//   - url string
func (_e *DiscoveryContractMock_Expecter) UpdateProvider(name interface{}, url interface{}) *DiscoveryContractMock_UpdateProvider_Call {
	return &DiscoveryContractMock_UpdateProvider_Call{Call: _e.mock.On("UpdateProvider", name, url)}
}

func (_c *DiscoveryContractMock_UpdateProvider_Call) Run(run func(name string, url string)) *DiscoveryContractMock_UpdateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DiscoveryContractMock_UpdateProvider_Call) Return(_a0 string, _a1 error) *DiscoveryContractMock_UpdateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DiscoveryContractMock_UpdateProvider_Call) RunAndReturn(run func(string, string) (string, error)) *DiscoveryContractMock_UpdateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewDiscoveryContractMock creates a new instance of DiscoveryContractMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoveryContractMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoveryContractMock {
	mock := &DiscoveryContractMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
