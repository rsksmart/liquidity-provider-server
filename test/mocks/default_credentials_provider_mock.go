// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	liquidity_provider "github.com/rsksmart/liquidity-provider-server/internal/entities/liquidity_provider"
	mock "github.com/stretchr/testify/mock"
)

// DefaultCredentialsProviderMock is an autogenerated mock type for the DefaultCredentialsProvider type
type DefaultCredentialsProviderMock struct {
	mock.Mock
}

type DefaultCredentialsProviderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DefaultCredentialsProviderMock) EXPECT() *DefaultCredentialsProviderMock_Expecter {
	return &DefaultCredentialsProviderMock_Expecter{mock: &_m.Mock}
}

// DefaultCredentials provides a mock function with given fields:
func (_m *DefaultCredentialsProviderMock) DefaultCredentials() *liquidity_provider.HashedCredentials {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DefaultCredentials")
	}

	var r0 *liquidity_provider.HashedCredentials
	if rf, ok := ret.Get(0).(func() *liquidity_provider.HashedCredentials); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*liquidity_provider.HashedCredentials)
		}
	}

	return r0
}

// DefaultCredentialsProviderMock_DefaultCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultCredentials'
type DefaultCredentialsProviderMock_DefaultCredentials_Call struct {
	*mock.Call
}

// DefaultCredentials is a helper method to define mock.On call
func (_e *DefaultCredentialsProviderMock_Expecter) DefaultCredentials() *DefaultCredentialsProviderMock_DefaultCredentials_Call {
	return &DefaultCredentialsProviderMock_DefaultCredentials_Call{Call: _e.mock.On("DefaultCredentials")}
}

func (_c *DefaultCredentialsProviderMock_DefaultCredentials_Call) Run(run func()) *DefaultCredentialsProviderMock_DefaultCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DefaultCredentialsProviderMock_DefaultCredentials_Call) Return(_a0 *liquidity_provider.HashedCredentials) *DefaultCredentialsProviderMock_DefaultCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DefaultCredentialsProviderMock_DefaultCredentials_Call) RunAndReturn(run func() *liquidity_provider.HashedCredentials) *DefaultCredentialsProviderMock_DefaultCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultCredentialsChannel provides a mock function with given fields:
func (_m *DefaultCredentialsProviderMock) GetDefaultCredentialsChannel() <-chan entities.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultCredentialsChannel")
	}

	var r0 <-chan entities.Event
	if rf, ok := ret.Get(0).(func() <-chan entities.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan entities.Event)
		}
	}

	return r0
}

// DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultCredentialsChannel'
type DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call struct {
	*mock.Call
}

// GetDefaultCredentialsChannel is a helper method to define mock.On call
func (_e *DefaultCredentialsProviderMock_Expecter) GetDefaultCredentialsChannel() *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call {
	return &DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call{Call: _e.mock.On("GetDefaultCredentialsChannel")}
}

func (_c *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call) Run(run func()) *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call) Return(_a0 <-chan entities.Event) *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call) RunAndReturn(run func() <-chan entities.Event) *DefaultCredentialsProviderMock_GetDefaultCredentialsChannel_Call {
	_c.Call.Return(run)
	return _c
}

// LiquidityProviderRepository provides a mock function with given fields:
func (_m *DefaultCredentialsProviderMock) LiquidityProviderRepository() liquidity_provider.LiquidityProviderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LiquidityProviderRepository")
	}

	var r0 liquidity_provider.LiquidityProviderRepository
	if rf, ok := ret.Get(0).(func() liquidity_provider.LiquidityProviderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(liquidity_provider.LiquidityProviderRepository)
		}
	}

	return r0
}

// DefaultCredentialsProviderMock_LiquidityProviderRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiquidityProviderRepository'
type DefaultCredentialsProviderMock_LiquidityProviderRepository_Call struct {
	*mock.Call
}

// LiquidityProviderRepository is a helper method to define mock.On call
func (_e *DefaultCredentialsProviderMock_Expecter) LiquidityProviderRepository() *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call {
	return &DefaultCredentialsProviderMock_LiquidityProviderRepository_Call{Call: _e.mock.On("LiquidityProviderRepository")}
}

func (_c *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call) Run(run func()) *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call) Return(_a0 liquidity_provider.LiquidityProviderRepository) *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call) RunAndReturn(run func() liquidity_provider.LiquidityProviderRepository) *DefaultCredentialsProviderMock_LiquidityProviderRepository_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultCredentials provides a mock function with given fields: password
func (_m *DefaultCredentialsProviderMock) SetDefaultCredentials(password *liquidity_provider.HashedCredentials) {
	_m.Called(password)
}

// DefaultCredentialsProviderMock_SetDefaultCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultCredentials'
type DefaultCredentialsProviderMock_SetDefaultCredentials_Call struct {
	*mock.Call
}

// SetDefaultCredentials is a helper method to define mock.On call
//   - password *liquidity_provider.HashedCredentials
func (_e *DefaultCredentialsProviderMock_Expecter) SetDefaultCredentials(password interface{}) *DefaultCredentialsProviderMock_SetDefaultCredentials_Call {
	return &DefaultCredentialsProviderMock_SetDefaultCredentials_Call{Call: _e.mock.On("SetDefaultCredentials", password)}
}

func (_c *DefaultCredentialsProviderMock_SetDefaultCredentials_Call) Run(run func(password *liquidity_provider.HashedCredentials)) *DefaultCredentialsProviderMock_SetDefaultCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*liquidity_provider.HashedCredentials))
	})
	return _c
}

func (_c *DefaultCredentialsProviderMock_SetDefaultCredentials_Call) Return() *DefaultCredentialsProviderMock_SetDefaultCredentials_Call {
	_c.Call.Return()
	return _c
}

func (_c *DefaultCredentialsProviderMock_SetDefaultCredentials_Call) RunAndReturn(run func(*liquidity_provider.HashedCredentials)) *DefaultCredentialsProviderMock_SetDefaultCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewDefaultCredentialsProviderMock creates a new instance of DefaultCredentialsProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDefaultCredentialsProviderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DefaultCredentialsProviderMock {
	mock := &DefaultCredentialsProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
