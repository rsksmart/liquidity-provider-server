// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	bindings "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock/bindings"

	mock "github.com/stretchr/testify/mock"

	rootstock "github.com/rsksmart/liquidity-provider-server/internal/adapters/dataproviders/rootstock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// LbcAdapterMock is an autogenerated mock type for the LbcAdapter type
type LbcAdapterMock struct {
	mock.Mock
}

type LbcAdapterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LbcAdapterMock) EXPECT() *LbcAdapterMock_Expecter {
	return &LbcAdapterMock_Expecter{mock: &_m.Mock}
}

// AddCollateral provides a mock function with given fields: opts
func (_m *LbcAdapterMock) AddCollateral(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AddCollateral")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_AddCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCollateral'
type LbcAdapterMock_AddCollateral_Call struct {
	*mock.Call
}

// AddCollateral is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *LbcAdapterMock_Expecter) AddCollateral(opts interface{}) *LbcAdapterMock_AddCollateral_Call {
	return &LbcAdapterMock_AddCollateral_Call{Call: _e.mock.On("AddCollateral", opts)}
}

func (_c *LbcAdapterMock_AddCollateral_Call) Run(run func(opts *bind.TransactOpts)) *LbcAdapterMock_AddCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_AddCollateral_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_AddCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_AddCollateral_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *LbcAdapterMock_AddCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// AddPegoutCollateral provides a mock function with given fields: opts
func (_m *LbcAdapterMock) AddPegoutCollateral(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AddPegoutCollateral")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_AddPegoutCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPegoutCollateral'
type LbcAdapterMock_AddPegoutCollateral_Call struct {
	*mock.Call
}

// AddPegoutCollateral is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *LbcAdapterMock_Expecter) AddPegoutCollateral(opts interface{}) *LbcAdapterMock_AddPegoutCollateral_Call {
	return &LbcAdapterMock_AddPegoutCollateral_Call{Call: _e.mock.On("AddPegoutCollateral", opts)}
}

func (_c *LbcAdapterMock_AddPegoutCollateral_Call) Run(run func(opts *bind.TransactOpts)) *LbcAdapterMock_AddPegoutCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_AddPegoutCollateral_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_AddPegoutCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_AddPegoutCollateral_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *LbcAdapterMock_AddPegoutCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// CallForUser provides a mock function with given fields: opts, quote
func (_m *LbcAdapterMock) CallForUser(opts *bind.TransactOpts, quote bindings.QuotesPeginQuote) (*types.Transaction, error) {
	ret := _m.Called(opts, quote)

	if len(ret) == 0 {
		panic("no return value specified for CallForUser")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPeginQuote) (*types.Transaction, error)); ok {
		return rf(opts, quote)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPeginQuote) *types.Transaction); ok {
		r0 = rf(opts, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, bindings.QuotesPeginQuote) error); ok {
		r1 = rf(opts, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_CallForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallForUser'
type LbcAdapterMock_CallForUser_Call struct {
	*mock.Call
}

// CallForUser is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - quote bindings.QuotesPeginQuote
func (_e *LbcAdapterMock_Expecter) CallForUser(opts interface{}, quote interface{}) *LbcAdapterMock_CallForUser_Call {
	return &LbcAdapterMock_CallForUser_Call{Call: _e.mock.On("CallForUser", opts, quote)}
}

func (_c *LbcAdapterMock_CallForUser_Call) Run(run func(opts *bind.TransactOpts, quote bindings.QuotesPeginQuote)) *LbcAdapterMock_CallForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(bindings.QuotesPeginQuote))
	})
	return _c
}

func (_c *LbcAdapterMock_CallForUser_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_CallForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_CallForUser_Call) RunAndReturn(run func(*bind.TransactOpts, bindings.QuotesPeginQuote) (*types.Transaction, error)) *LbcAdapterMock_CallForUser_Call {
	_c.Call.Return(run)
	return _c
}

// Caller provides a mock function with given fields:
func (_m *LbcAdapterMock) Caller() rootstock.LbcCallerBinding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Caller")
	}

	var r0 rootstock.LbcCallerBinding
	if rf, ok := ret.Get(0).(func() rootstock.LbcCallerBinding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rootstock.LbcCallerBinding)
		}
	}

	return r0
}

// LbcAdapterMock_Caller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Caller'
type LbcAdapterMock_Caller_Call struct {
	*mock.Call
}

// Caller is a helper method to define mock.On call
func (_e *LbcAdapterMock_Expecter) Caller() *LbcAdapterMock_Caller_Call {
	return &LbcAdapterMock_Caller_Call{Call: _e.mock.On("Caller")}
}

func (_c *LbcAdapterMock_Caller_Call) Run(run func()) *LbcAdapterMock_Caller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LbcAdapterMock_Caller_Call) Return(_a0 rootstock.LbcCallerBinding) *LbcAdapterMock_Caller_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LbcAdapterMock_Caller_Call) RunAndReturn(run func() rootstock.LbcCallerBinding) *LbcAdapterMock_Caller_Call {
	_c.Call.Return(run)
	return _c
}

// DepositEventIteratorAdapter provides a mock function with given fields: rawIterator
func (_m *LbcAdapterMock) DepositEventIteratorAdapter(rawIterator *bindings.LiquidityBridgeContractPegOutDepositIterator) rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPegOutDeposit] {
	ret := _m.Called(rawIterator)

	if len(ret) == 0 {
		panic("no return value specified for DepositEventIteratorAdapter")
	}

	var r0 rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPegOutDeposit]
	if rf, ok := ret.Get(0).(func(*bindings.LiquidityBridgeContractPegOutDepositIterator) rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPegOutDeposit]); ok {
		r0 = rf(rawIterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPegOutDeposit])
		}
	}

	return r0
}

// LbcAdapterMock_DepositEventIteratorAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepositEventIteratorAdapter'
type LbcAdapterMock_DepositEventIteratorAdapter_Call struct {
	*mock.Call
}

// DepositEventIteratorAdapter is a helper method to define mock.On call
//   - rawIterator *bindings.LiquidityBridgeContractPegOutDepositIterator
func (_e *LbcAdapterMock_Expecter) DepositEventIteratorAdapter(rawIterator interface{}) *LbcAdapterMock_DepositEventIteratorAdapter_Call {
	return &LbcAdapterMock_DepositEventIteratorAdapter_Call{Call: _e.mock.On("DepositEventIteratorAdapter", rawIterator)}
}

func (_c *LbcAdapterMock_DepositEventIteratorAdapter_Call) Run(run func(rawIterator *bindings.LiquidityBridgeContractPegOutDepositIterator)) *LbcAdapterMock_DepositEventIteratorAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bindings.LiquidityBridgeContractPegOutDepositIterator))
	})
	return _c
}

func (_c *LbcAdapterMock_DepositEventIteratorAdapter_Call) Return(_a0 rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPegOutDeposit]) *LbcAdapterMock_DepositEventIteratorAdapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LbcAdapterMock_DepositEventIteratorAdapter_Call) RunAndReturn(run func(*bindings.LiquidityBridgeContractPegOutDepositIterator) rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPegOutDeposit]) *LbcAdapterMock_DepositEventIteratorAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// FilterPegOutDeposit provides a mock function with given fields: opts, quoteHash, sender
func (_m *LbcAdapterMock) FilterPegOutDeposit(opts *bind.FilterOpts, quoteHash [][32]byte, sender []common.Address) (*bindings.LiquidityBridgeContractPegOutDepositIterator, error) {
	ret := _m.Called(opts, quoteHash, sender)

	if len(ret) == 0 {
		panic("no return value specified for FilterPegOutDeposit")
	}

	var r0 *bindings.LiquidityBridgeContractPegOutDepositIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, [][32]byte, []common.Address) (*bindings.LiquidityBridgeContractPegOutDepositIterator, error)); ok {
		return rf(opts, quoteHash, sender)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, [][32]byte, []common.Address) *bindings.LiquidityBridgeContractPegOutDepositIterator); ok {
		r0 = rf(opts, quoteHash, sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.LiquidityBridgeContractPegOutDepositIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, [][32]byte, []common.Address) error); ok {
		r1 = rf(opts, quoteHash, sender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_FilterPegOutDeposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterPegOutDeposit'
type LbcAdapterMock_FilterPegOutDeposit_Call struct {
	*mock.Call
}

// FilterPegOutDeposit is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - quoteHash [][32]byte
//   - sender []common.Address
func (_e *LbcAdapterMock_Expecter) FilterPegOutDeposit(opts interface{}, quoteHash interface{}, sender interface{}) *LbcAdapterMock_FilterPegOutDeposit_Call {
	return &LbcAdapterMock_FilterPegOutDeposit_Call{Call: _e.mock.On("FilterPegOutDeposit", opts, quoteHash, sender)}
}

func (_c *LbcAdapterMock_FilterPegOutDeposit_Call) Run(run func(opts *bind.FilterOpts, quoteHash [][32]byte, sender []common.Address)) *LbcAdapterMock_FilterPegOutDeposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([][32]byte), args[2].([]common.Address))
	})
	return _c
}

func (_c *LbcAdapterMock_FilterPegOutDeposit_Call) Return(_a0 *bindings.LiquidityBridgeContractPegOutDepositIterator, _a1 error) *LbcAdapterMock_FilterPegOutDeposit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_FilterPegOutDeposit_Call) RunAndReturn(run func(*bind.FilterOpts, [][32]byte, []common.Address) (*bindings.LiquidityBridgeContractPegOutDepositIterator, error)) *LbcAdapterMock_FilterPegOutDeposit_Call {
	_c.Call.Return(run)
	return _c
}

// FilterPenalized provides a mock function with given fields: opts
func (_m *LbcAdapterMock) FilterPenalized(opts *bind.FilterOpts) (*bindings.LiquidityBridgeContractPenalizedIterator, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for FilterPenalized")
	}

	var r0 *bindings.LiquidityBridgeContractPenalizedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) (*bindings.LiquidityBridgeContractPenalizedIterator, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *bindings.LiquidityBridgeContractPenalizedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.LiquidityBridgeContractPenalizedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_FilterPenalized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterPenalized'
type LbcAdapterMock_FilterPenalized_Call struct {
	*mock.Call
}

// FilterPenalized is a helper method to define mock.On call
//   - opts *bind.FilterOpts
func (_e *LbcAdapterMock_Expecter) FilterPenalized(opts interface{}) *LbcAdapterMock_FilterPenalized_Call {
	return &LbcAdapterMock_FilterPenalized_Call{Call: _e.mock.On("FilterPenalized", opts)}
}

func (_c *LbcAdapterMock_FilterPenalized_Call) Run(run func(opts *bind.FilterOpts)) *LbcAdapterMock_FilterPenalized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_FilterPenalized_Call) Return(_a0 *bindings.LiquidityBridgeContractPenalizedIterator, _a1 error) *LbcAdapterMock_FilterPenalized_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_FilterPenalized_Call) RunAndReturn(run func(*bind.FilterOpts) (*bindings.LiquidityBridgeContractPenalizedIterator, error)) *LbcAdapterMock_FilterPenalized_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: opts, addr
func (_m *LbcAdapterMock) GetBalance(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type LbcAdapterMock_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *LbcAdapterMock_Expecter) GetBalance(opts interface{}, addr interface{}) *LbcAdapterMock_GetBalance_Call {
	return &LbcAdapterMock_GetBalance_Call{Call: _e.mock.On("GetBalance", opts, addr)}
}

func (_c *LbcAdapterMock_GetBalance_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *LbcAdapterMock_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *LbcAdapterMock_GetBalance_Call) Return(_a0 *big.Int, _a1 error) *LbcAdapterMock_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_GetBalance_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *LbcAdapterMock_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollateral provides a mock function with given fields: opts, addr
func (_m *LbcAdapterMock) GetCollateral(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetCollateral")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_GetCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollateral'
type LbcAdapterMock_GetCollateral_Call struct {
	*mock.Call
}

// GetCollateral is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *LbcAdapterMock_Expecter) GetCollateral(opts interface{}, addr interface{}) *LbcAdapterMock_GetCollateral_Call {
	return &LbcAdapterMock_GetCollateral_Call{Call: _e.mock.On("GetCollateral", opts, addr)}
}

func (_c *LbcAdapterMock_GetCollateral_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *LbcAdapterMock_GetCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *LbcAdapterMock_GetCollateral_Call) Return(_a0 *big.Int, _a1 error) *LbcAdapterMock_GetCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_GetCollateral_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *LbcAdapterMock_GetCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetMinCollateral provides a mock function with given fields: opts
func (_m *LbcAdapterMock) GetMinCollateral(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetMinCollateral")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_GetMinCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinCollateral'
type LbcAdapterMock_GetMinCollateral_Call struct {
	*mock.Call
}

// GetMinCollateral is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *LbcAdapterMock_Expecter) GetMinCollateral(opts interface{}) *LbcAdapterMock_GetMinCollateral_Call {
	return &LbcAdapterMock_GetMinCollateral_Call{Call: _e.mock.On("GetMinCollateral", opts)}
}

func (_c *LbcAdapterMock_GetMinCollateral_Call) Run(run func(opts *bind.CallOpts)) *LbcAdapterMock_GetMinCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_GetMinCollateral_Call) Return(_a0 *big.Int, _a1 error) *LbcAdapterMock_GetMinCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_GetMinCollateral_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *LbcAdapterMock_GetMinCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegoutCollateral provides a mock function with given fields: opts, addr
func (_m *LbcAdapterMock) GetPegoutCollateral(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetPegoutCollateral")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (*big.Int, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) *big.Int); ok {
		r0 = rf(opts, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_GetPegoutCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegoutCollateral'
type LbcAdapterMock_GetPegoutCollateral_Call struct {
	*mock.Call
}

// GetPegoutCollateral is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *LbcAdapterMock_Expecter) GetPegoutCollateral(opts interface{}, addr interface{}) *LbcAdapterMock_GetPegoutCollateral_Call {
	return &LbcAdapterMock_GetPegoutCollateral_Call{Call: _e.mock.On("GetPegoutCollateral", opts, addr)}
}

func (_c *LbcAdapterMock_GetPegoutCollateral_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *LbcAdapterMock_GetPegoutCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *LbcAdapterMock_GetPegoutCollateral_Call) Return(_a0 *big.Int, _a1 error) *LbcAdapterMock_GetPegoutCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_GetPegoutCollateral_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (*big.Int, error)) *LbcAdapterMock_GetPegoutCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderIds provides a mock function with given fields: opts
func (_m *LbcAdapterMock) GetProviderIds(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderIds")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_GetProviderIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderIds'
type LbcAdapterMock_GetProviderIds_Call struct {
	*mock.Call
}

// GetProviderIds is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *LbcAdapterMock_Expecter) GetProviderIds(opts interface{}) *LbcAdapterMock_GetProviderIds_Call {
	return &LbcAdapterMock_GetProviderIds_Call{Call: _e.mock.On("GetProviderIds", opts)}
}

func (_c *LbcAdapterMock_GetProviderIds_Call) Run(run func(opts *bind.CallOpts)) *LbcAdapterMock_GetProviderIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_GetProviderIds_Call) Return(_a0 *big.Int, _a1 error) *LbcAdapterMock_GetProviderIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_GetProviderIds_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *LbcAdapterMock_GetProviderIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviders provides a mock function with given fields: opts, providerIds
func (_m *LbcAdapterMock) GetProviders(opts *bind.CallOpts, providerIds []*big.Int) ([]bindings.LiquidityBridgeContractLiquidityProvider, error) {
	ret := _m.Called(opts, providerIds)

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 []bindings.LiquidityBridgeContractLiquidityProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, []*big.Int) ([]bindings.LiquidityBridgeContractLiquidityProvider, error)); ok {
		return rf(opts, providerIds)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, []*big.Int) []bindings.LiquidityBridgeContractLiquidityProvider); ok {
		r0 = rf(opts, providerIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bindings.LiquidityBridgeContractLiquidityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, []*big.Int) error); ok {
		r1 = rf(opts, providerIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_GetProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviders'
type LbcAdapterMock_GetProviders_Call struct {
	*mock.Call
}

// GetProviders is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - providerIds []*big.Int
func (_e *LbcAdapterMock_Expecter) GetProviders(opts interface{}, providerIds interface{}) *LbcAdapterMock_GetProviders_Call {
	return &LbcAdapterMock_GetProviders_Call{Call: _e.mock.On("GetProviders", opts, providerIds)}
}

func (_c *LbcAdapterMock_GetProviders_Call) Run(run func(opts *bind.CallOpts, providerIds []*big.Int)) *LbcAdapterMock_GetProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].([]*big.Int))
	})
	return _c
}

func (_c *LbcAdapterMock_GetProviders_Call) Return(_a0 []bindings.LiquidityBridgeContractLiquidityProvider, _a1 error) *LbcAdapterMock_GetProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_GetProviders_Call) RunAndReturn(run func(*bind.CallOpts, []*big.Int) ([]bindings.LiquidityBridgeContractLiquidityProvider, error)) *LbcAdapterMock_GetProviders_Call {
	_c.Call.Return(run)
	return _c
}

// HashPegoutQuote provides a mock function with given fields: opts, quote
func (_m *LbcAdapterMock) HashPegoutQuote(opts *bind.CallOpts, quote bindings.QuotesPegOutQuote) ([32]byte, error) {
	ret := _m.Called(opts, quote)

	if len(ret) == 0 {
		panic("no return value specified for HashPegoutQuote")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, bindings.QuotesPegOutQuote) ([32]byte, error)); ok {
		return rf(opts, quote)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, bindings.QuotesPegOutQuote) [32]byte); ok {
		r0 = rf(opts, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, bindings.QuotesPegOutQuote) error); ok {
		r1 = rf(opts, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_HashPegoutQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPegoutQuote'
type LbcAdapterMock_HashPegoutQuote_Call struct {
	*mock.Call
}

// HashPegoutQuote is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - quote bindings.QuotesPegOutQuote
func (_e *LbcAdapterMock_Expecter) HashPegoutQuote(opts interface{}, quote interface{}) *LbcAdapterMock_HashPegoutQuote_Call {
	return &LbcAdapterMock_HashPegoutQuote_Call{Call: _e.mock.On("HashPegoutQuote", opts, quote)}
}

func (_c *LbcAdapterMock_HashPegoutQuote_Call) Run(run func(opts *bind.CallOpts, quote bindings.QuotesPegOutQuote)) *LbcAdapterMock_HashPegoutQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(bindings.QuotesPegOutQuote))
	})
	return _c
}

func (_c *LbcAdapterMock_HashPegoutQuote_Call) Return(_a0 [32]byte, _a1 error) *LbcAdapterMock_HashPegoutQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_HashPegoutQuote_Call) RunAndReturn(run func(*bind.CallOpts, bindings.QuotesPegOutQuote) ([32]byte, error)) *LbcAdapterMock_HashPegoutQuote_Call {
	_c.Call.Return(run)
	return _c
}

// HashQuote provides a mock function with given fields: opts, quote
func (_m *LbcAdapterMock) HashQuote(opts *bind.CallOpts, quote bindings.QuotesPeginQuote) ([32]byte, error) {
	ret := _m.Called(opts, quote)

	if len(ret) == 0 {
		panic("no return value specified for HashQuote")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, bindings.QuotesPeginQuote) ([32]byte, error)); ok {
		return rf(opts, quote)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, bindings.QuotesPeginQuote) [32]byte); ok {
		r0 = rf(opts, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, bindings.QuotesPeginQuote) error); ok {
		r1 = rf(opts, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_HashQuote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashQuote'
type LbcAdapterMock_HashQuote_Call struct {
	*mock.Call
}

// HashQuote is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - quote bindings.QuotesPeginQuote
func (_e *LbcAdapterMock_Expecter) HashQuote(opts interface{}, quote interface{}) *LbcAdapterMock_HashQuote_Call {
	return &LbcAdapterMock_HashQuote_Call{Call: _e.mock.On("HashQuote", opts, quote)}
}

func (_c *LbcAdapterMock_HashQuote_Call) Run(run func(opts *bind.CallOpts, quote bindings.QuotesPeginQuote)) *LbcAdapterMock_HashQuote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(bindings.QuotesPeginQuote))
	})
	return _c
}

func (_c *LbcAdapterMock_HashQuote_Call) Return(_a0 [32]byte, _a1 error) *LbcAdapterMock_HashQuote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_HashQuote_Call) RunAndReturn(run func(*bind.CallOpts, bindings.QuotesPeginQuote) ([32]byte, error)) *LbcAdapterMock_HashQuote_Call {
	_c.Call.Return(run)
	return _c
}

// IsOperational provides a mock function with given fields: opts, addr
func (_m *LbcAdapterMock) IsOperational(opts *bind.CallOpts, addr common.Address) (bool, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for IsOperational")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_IsOperational_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperational'
type LbcAdapterMock_IsOperational_Call struct {
	*mock.Call
}

// IsOperational is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *LbcAdapterMock_Expecter) IsOperational(opts interface{}, addr interface{}) *LbcAdapterMock_IsOperational_Call {
	return &LbcAdapterMock_IsOperational_Call{Call: _e.mock.On("IsOperational", opts, addr)}
}

func (_c *LbcAdapterMock_IsOperational_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *LbcAdapterMock_IsOperational_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *LbcAdapterMock_IsOperational_Call) Return(_a0 bool, _a1 error) *LbcAdapterMock_IsOperational_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_IsOperational_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (bool, error)) *LbcAdapterMock_IsOperational_Call {
	_c.Call.Return(run)
	return _c
}

// IsOperationalForPegout provides a mock function with given fields: opts, addr
func (_m *LbcAdapterMock) IsOperationalForPegout(opts *bind.CallOpts, addr common.Address) (bool, error) {
	ret := _m.Called(opts, addr)

	if len(ret) == 0 {
		panic("no return value specified for IsOperationalForPegout")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, addr)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_IsOperationalForPegout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperationalForPegout'
type LbcAdapterMock_IsOperationalForPegout_Call struct {
	*mock.Call
}

// IsOperationalForPegout is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - addr common.Address
func (_e *LbcAdapterMock_Expecter) IsOperationalForPegout(opts interface{}, addr interface{}) *LbcAdapterMock_IsOperationalForPegout_Call {
	return &LbcAdapterMock_IsOperationalForPegout_Call{Call: _e.mock.On("IsOperationalForPegout", opts, addr)}
}

func (_c *LbcAdapterMock_IsOperationalForPegout_Call) Run(run func(opts *bind.CallOpts, addr common.Address)) *LbcAdapterMock_IsOperationalForPegout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *LbcAdapterMock_IsOperationalForPegout_Call) Return(_a0 bool, _a1 error) *LbcAdapterMock_IsOperationalForPegout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_IsOperationalForPegout_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (bool, error)) *LbcAdapterMock_IsOperationalForPegout_Call {
	_c.Call.Return(run)
	return _c
}

// IsPegOutQuoteCompleted provides a mock function with given fields: opts, quoteHash
func (_m *LbcAdapterMock) IsPegOutQuoteCompleted(opts *bind.CallOpts, quoteHash [32]byte) (bool, error) {
	ret := _m.Called(opts, quoteHash)

	if len(ret) == 0 {
		panic("no return value specified for IsPegOutQuoteCompleted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [32]byte) (bool, error)); ok {
		return rf(opts, quoteHash)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [32]byte) bool); ok {
		r0 = rf(opts, quoteHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, [32]byte) error); ok {
		r1 = rf(opts, quoteHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_IsPegOutQuoteCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPegOutQuoteCompleted'
type LbcAdapterMock_IsPegOutQuoteCompleted_Call struct {
	*mock.Call
}

// IsPegOutQuoteCompleted is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - quoteHash [32]byte
func (_e *LbcAdapterMock_Expecter) IsPegOutQuoteCompleted(opts interface{}, quoteHash interface{}) *LbcAdapterMock_IsPegOutQuoteCompleted_Call {
	return &LbcAdapterMock_IsPegOutQuoteCompleted_Call{Call: _e.mock.On("IsPegOutQuoteCompleted", opts, quoteHash)}
}

func (_c *LbcAdapterMock_IsPegOutQuoteCompleted_Call) Run(run func(opts *bind.CallOpts, quoteHash [32]byte)) *LbcAdapterMock_IsPegOutQuoteCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].([32]byte))
	})
	return _c
}

func (_c *LbcAdapterMock_IsPegOutQuoteCompleted_Call) Return(_a0 bool, _a1 error) *LbcAdapterMock_IsPegOutQuoteCompleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_IsPegOutQuoteCompleted_Call) RunAndReturn(run func(*bind.CallOpts, [32]byte) (bool, error)) *LbcAdapterMock_IsPegOutQuoteCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRegister provides a mock function with given fields: log
func (_m *LbcAdapterMock) ParseRegister(log types.Log) (*bindings.LiquidityBridgeContractRegister, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseRegister")
	}

	var r0 *bindings.LiquidityBridgeContractRegister
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*bindings.LiquidityBridgeContractRegister, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *bindings.LiquidityBridgeContractRegister); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bindings.LiquidityBridgeContractRegister)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_ParseRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRegister'
type LbcAdapterMock_ParseRegister_Call struct {
	*mock.Call
}

// ParseRegister is a helper method to define mock.On call
//   - log types.Log
func (_e *LbcAdapterMock_Expecter) ParseRegister(log interface{}) *LbcAdapterMock_ParseRegister_Call {
	return &LbcAdapterMock_ParseRegister_Call{Call: _e.mock.On("ParseRegister", log)}
}

func (_c *LbcAdapterMock_ParseRegister_Call) Run(run func(log types.Log)) *LbcAdapterMock_ParseRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *LbcAdapterMock_ParseRegister_Call) Return(_a0 *bindings.LiquidityBridgeContractRegister, _a1 error) *LbcAdapterMock_ParseRegister_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_ParseRegister_Call) RunAndReturn(run func(types.Log) (*bindings.LiquidityBridgeContractRegister, error)) *LbcAdapterMock_ParseRegister_Call {
	_c.Call.Return(run)
	return _c
}

// PenalizedEventIteratorAdapter provides a mock function with given fields: rawIterator
func (_m *LbcAdapterMock) PenalizedEventIteratorAdapter(rawIterator *bindings.LiquidityBridgeContractPenalizedIterator) rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPenalized] {
	ret := _m.Called(rawIterator)

	if len(ret) == 0 {
		panic("no return value specified for PenalizedEventIteratorAdapter")
	}

	var r0 rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPenalized]
	if rf, ok := ret.Get(0).(func(*bindings.LiquidityBridgeContractPenalizedIterator) rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPenalized]); ok {
		r0 = rf(rawIterator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPenalized])
		}
	}

	return r0
}

// LbcAdapterMock_PenalizedEventIteratorAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PenalizedEventIteratorAdapter'
type LbcAdapterMock_PenalizedEventIteratorAdapter_Call struct {
	*mock.Call
}

// PenalizedEventIteratorAdapter is a helper method to define mock.On call
//   - rawIterator *bindings.LiquidityBridgeContractPenalizedIterator
func (_e *LbcAdapterMock_Expecter) PenalizedEventIteratorAdapter(rawIterator interface{}) *LbcAdapterMock_PenalizedEventIteratorAdapter_Call {
	return &LbcAdapterMock_PenalizedEventIteratorAdapter_Call{Call: _e.mock.On("PenalizedEventIteratorAdapter", rawIterator)}
}

func (_c *LbcAdapterMock_PenalizedEventIteratorAdapter_Call) Run(run func(rawIterator *bindings.LiquidityBridgeContractPenalizedIterator)) *LbcAdapterMock_PenalizedEventIteratorAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bindings.LiquidityBridgeContractPenalizedIterator))
	})
	return _c
}

func (_c *LbcAdapterMock_PenalizedEventIteratorAdapter_Call) Return(_a0 rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPenalized]) *LbcAdapterMock_PenalizedEventIteratorAdapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LbcAdapterMock_PenalizedEventIteratorAdapter_Call) RunAndReturn(run func(*bindings.LiquidityBridgeContractPenalizedIterator) rootstock.EventIteratorAdapter[bindings.LiquidityBridgeContractPenalized]) *LbcAdapterMock_PenalizedEventIteratorAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// ProductFeePercentage provides a mock function with given fields: opts
func (_m *LbcAdapterMock) ProductFeePercentage(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for ProductFeePercentage")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_ProductFeePercentage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProductFeePercentage'
type LbcAdapterMock_ProductFeePercentage_Call struct {
	*mock.Call
}

// ProductFeePercentage is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *LbcAdapterMock_Expecter) ProductFeePercentage(opts interface{}) *LbcAdapterMock_ProductFeePercentage_Call {
	return &LbcAdapterMock_ProductFeePercentage_Call{Call: _e.mock.On("ProductFeePercentage", opts)}
}

func (_c *LbcAdapterMock_ProductFeePercentage_Call) Run(run func(opts *bind.CallOpts)) *LbcAdapterMock_ProductFeePercentage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_ProductFeePercentage_Call) Return(_a0 *big.Int, _a1 error) *LbcAdapterMock_ProductFeePercentage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_ProductFeePercentage_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *LbcAdapterMock_ProductFeePercentage_Call {
	_c.Call.Return(run)
	return _c
}

// RefundPegOut provides a mock function with given fields: opts, quoteHash, btcTx, btcBlockHeaderHash, partialMerkleTree, merkleBranchHashes
func (_m *LbcAdapterMock) RefundPegOut(opts *bind.TransactOpts, quoteHash [32]byte, btcTx []byte, btcBlockHeaderHash [32]byte, partialMerkleTree *big.Int, merkleBranchHashes [][32]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, quoteHash, btcTx, btcBlockHeaderHash, partialMerkleTree, merkleBranchHashes)

	if len(ret) == 0 {
		panic("no return value specified for RefundPegOut")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte, []byte, [32]byte, *big.Int, [][32]byte) (*types.Transaction, error)); ok {
		return rf(opts, quoteHash, btcTx, btcBlockHeaderHash, partialMerkleTree, merkleBranchHashes)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte, []byte, [32]byte, *big.Int, [][32]byte) *types.Transaction); ok {
		r0 = rf(opts, quoteHash, btcTx, btcBlockHeaderHash, partialMerkleTree, merkleBranchHashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte, []byte, [32]byte, *big.Int, [][32]byte) error); ok {
		r1 = rf(opts, quoteHash, btcTx, btcBlockHeaderHash, partialMerkleTree, merkleBranchHashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_RefundPegOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundPegOut'
type LbcAdapterMock_RefundPegOut_Call struct {
	*mock.Call
}

// RefundPegOut is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - quoteHash [32]byte
//   - btcTx []byte
//   - btcBlockHeaderHash [32]byte
//   - partialMerkleTree *big.Int
//   - merkleBranchHashes [][32]byte
func (_e *LbcAdapterMock_Expecter) RefundPegOut(opts interface{}, quoteHash interface{}, btcTx interface{}, btcBlockHeaderHash interface{}, partialMerkleTree interface{}, merkleBranchHashes interface{}) *LbcAdapterMock_RefundPegOut_Call {
	return &LbcAdapterMock_RefundPegOut_Call{Call: _e.mock.On("RefundPegOut", opts, quoteHash, btcTx, btcBlockHeaderHash, partialMerkleTree, merkleBranchHashes)}
}

func (_c *LbcAdapterMock_RefundPegOut_Call) Run(run func(opts *bind.TransactOpts, quoteHash [32]byte, btcTx []byte, btcBlockHeaderHash [32]byte, partialMerkleTree *big.Int, merkleBranchHashes [][32]byte)) *LbcAdapterMock_RefundPegOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([32]byte), args[2].([]byte), args[3].([32]byte), args[4].(*big.Int), args[5].([][32]byte))
	})
	return _c
}

func (_c *LbcAdapterMock_RefundPegOut_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_RefundPegOut_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_RefundPegOut_Call) RunAndReturn(run func(*bind.TransactOpts, [32]byte, []byte, [32]byte, *big.Int, [][32]byte) (*types.Transaction, error)) *LbcAdapterMock_RefundPegOut_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: opts, _name, _apiBaseUrl, _status, _providerType
func (_m *LbcAdapterMock) Register(opts *bind.TransactOpts, _name string, _apiBaseUrl string, _status bool, _providerType string) (*types.Transaction, error) {
	ret := _m.Called(opts, _name, _apiBaseUrl, _status, _providerType)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, bool, string) (*types.Transaction, error)); ok {
		return rf(opts, _name, _apiBaseUrl, _status, _providerType)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, bool, string) *types.Transaction); ok {
		r0 = rf(opts, _name, _apiBaseUrl, _status, _providerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string, bool, string) error); ok {
		r1 = rf(opts, _name, _apiBaseUrl, _status, _providerType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type LbcAdapterMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _name string
//   - _apiBaseUrl string
//   - _status bool
//   - _providerType string
func (_e *LbcAdapterMock_Expecter) Register(opts interface{}, _name interface{}, _apiBaseUrl interface{}, _status interface{}, _providerType interface{}) *LbcAdapterMock_Register_Call {
	return &LbcAdapterMock_Register_Call{Call: _e.mock.On("Register", opts, _name, _apiBaseUrl, _status, _providerType)}
}

func (_c *LbcAdapterMock_Register_Call) Run(run func(opts *bind.TransactOpts, _name string, _apiBaseUrl string, _status bool, _providerType string)) *LbcAdapterMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string), args[2].(string), args[3].(bool), args[4].(string))
	})
	return _c
}

func (_c *LbcAdapterMock_Register_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_Register_Call) RunAndReturn(run func(*bind.TransactOpts, string, string, bool, string) (*types.Transaction, error)) *LbcAdapterMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPegIn provides a mock function with given fields: opts, quote, signature, btcRawTransaction, partialMerkleTree, height
func (_m *LbcAdapterMock) RegisterPegIn(opts *bind.TransactOpts, quote bindings.QuotesPeginQuote, signature []byte, btcRawTransaction []byte, partialMerkleTree []byte, height *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPegIn")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPeginQuote, []byte, []byte, []byte, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bindings.QuotesPeginQuote, []byte, []byte, []byte, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, bindings.QuotesPeginQuote, []byte, []byte, []byte, *big.Int) error); ok {
		r1 = rf(opts, quote, signature, btcRawTransaction, partialMerkleTree, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_RegisterPegIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPegIn'
type LbcAdapterMock_RegisterPegIn_Call struct {
	*mock.Call
}

// RegisterPegIn is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - quote bindings.QuotesPeginQuote
//   - signature []byte
//   - btcRawTransaction []byte
//   - partialMerkleTree []byte
//   - height *big.Int
func (_e *LbcAdapterMock_Expecter) RegisterPegIn(opts interface{}, quote interface{}, signature interface{}, btcRawTransaction interface{}, partialMerkleTree interface{}, height interface{}) *LbcAdapterMock_RegisterPegIn_Call {
	return &LbcAdapterMock_RegisterPegIn_Call{Call: _e.mock.On("RegisterPegIn", opts, quote, signature, btcRawTransaction, partialMerkleTree, height)}
}

func (_c *LbcAdapterMock_RegisterPegIn_Call) Run(run func(opts *bind.TransactOpts, quote bindings.QuotesPeginQuote, signature []byte, btcRawTransaction []byte, partialMerkleTree []byte, height *big.Int)) *LbcAdapterMock_RegisterPegIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(bindings.QuotesPeginQuote), args[2].([]byte), args[3].([]byte), args[4].([]byte), args[5].(*big.Int))
	})
	return _c
}

func (_c *LbcAdapterMock_RegisterPegIn_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_RegisterPegIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_RegisterPegIn_Call) RunAndReturn(run func(*bind.TransactOpts, bindings.QuotesPeginQuote, []byte, []byte, []byte, *big.Int) (*types.Transaction, error)) *LbcAdapterMock_RegisterPegIn_Call {
	_c.Call.Return(run)
	return _c
}

// Resign provides a mock function with given fields: opts
func (_m *LbcAdapterMock) Resign(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Resign")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_Resign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resign'
type LbcAdapterMock_Resign_Call struct {
	*mock.Call
}

// Resign is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *LbcAdapterMock_Expecter) Resign(opts interface{}) *LbcAdapterMock_Resign_Call {
	return &LbcAdapterMock_Resign_Call{Call: _e.mock.On("Resign", opts)}
}

func (_c *LbcAdapterMock_Resign_Call) Run(run func(opts *bind.TransactOpts)) *LbcAdapterMock_Resign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_Resign_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_Resign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_Resign_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *LbcAdapterMock_Resign_Call {
	_c.Call.Return(run)
	return _c
}

// SetProviderStatus provides a mock function with given fields: opts, _providerId, status
func (_m *LbcAdapterMock) SetProviderStatus(opts *bind.TransactOpts, _providerId *big.Int, status bool) (*types.Transaction, error) {
	ret := _m.Called(opts, _providerId, status)

	if len(ret) == 0 {
		panic("no return value specified for SetProviderStatus")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, bool) (*types.Transaction, error)); ok {
		return rf(opts, _providerId, status)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, bool) *types.Transaction); ok {
		r0 = rf(opts, _providerId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, bool) error); ok {
		r1 = rf(opts, _providerId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_SetProviderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProviderStatus'
type LbcAdapterMock_SetProviderStatus_Call struct {
	*mock.Call
}

// SetProviderStatus is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _providerId *big.Int
//   - status bool
func (_e *LbcAdapterMock_Expecter) SetProviderStatus(opts interface{}, _providerId interface{}, status interface{}) *LbcAdapterMock_SetProviderStatus_Call {
	return &LbcAdapterMock_SetProviderStatus_Call{Call: _e.mock.On("SetProviderStatus", opts, _providerId, status)}
}

func (_c *LbcAdapterMock_SetProviderStatus_Call) Run(run func(opts *bind.TransactOpts, _providerId *big.Int, status bool)) *LbcAdapterMock_SetProviderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(*big.Int), args[2].(bool))
	})
	return _c
}

func (_c *LbcAdapterMock_SetProviderStatus_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_SetProviderStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_SetProviderStatus_Call) RunAndReturn(run func(*bind.TransactOpts, *big.Int, bool) (*types.Transaction, error)) *LbcAdapterMock_SetProviderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawCollateral provides a mock function with given fields: opts
func (_m *LbcAdapterMock) WithdrawCollateral(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawCollateral")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LbcAdapterMock_WithdrawCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawCollateral'
type LbcAdapterMock_WithdrawCollateral_Call struct {
	*mock.Call
}

// WithdrawCollateral is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *LbcAdapterMock_Expecter) WithdrawCollateral(opts interface{}) *LbcAdapterMock_WithdrawCollateral_Call {
	return &LbcAdapterMock_WithdrawCollateral_Call{Call: _e.mock.On("WithdrawCollateral", opts)}
}

func (_c *LbcAdapterMock_WithdrawCollateral_Call) Run(run func(opts *bind.TransactOpts)) *LbcAdapterMock_WithdrawCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *LbcAdapterMock_WithdrawCollateral_Call) Return(_a0 *types.Transaction, _a1 error) *LbcAdapterMock_WithdrawCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LbcAdapterMock_WithdrawCollateral_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *LbcAdapterMock_WithdrawCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// NewLbcAdapterMock creates a new instance of LbcAdapterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLbcAdapterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LbcAdapterMock {
	mock := &LbcAdapterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
