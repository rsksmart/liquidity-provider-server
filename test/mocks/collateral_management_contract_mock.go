// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	mock "github.com/stretchr/testify/mock"

	penalization "github.com/rsksmart/liquidity-provider-server/internal/entities/penalization"
)

// CollateralManagementContractMock is an autogenerated mock type for the CollateralManagementContract type
type CollateralManagementContractMock struct {
	mock.Mock
}

type CollateralManagementContractMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CollateralManagementContractMock) EXPECT() *CollateralManagementContractMock_Expecter {
	return &CollateralManagementContractMock_Expecter{mock: &_m.Mock}
}

// AddCollateral provides a mock function with given fields: amount
func (_m *CollateralManagementContractMock) AddCollateral(amount *entities.Wei) error {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for AddCollateral")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Wei) error); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollateralManagementContractMock_AddCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCollateral'
type CollateralManagementContractMock_AddCollateral_Call struct {
	*mock.Call
}

// AddCollateral is a helper method to define mock.On call
//   - amount *entities.Wei
func (_e *CollateralManagementContractMock_Expecter) AddCollateral(amount interface{}) *CollateralManagementContractMock_AddCollateral_Call {
	return &CollateralManagementContractMock_AddCollateral_Call{Call: _e.mock.On("AddCollateral", amount)}
}

func (_c *CollateralManagementContractMock_AddCollateral_Call) Run(run func(amount *entities.Wei)) *CollateralManagementContractMock_AddCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Wei))
	})
	return _c
}

func (_c *CollateralManagementContractMock_AddCollateral_Call) Return(_a0 error) *CollateralManagementContractMock_AddCollateral_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementContractMock_AddCollateral_Call) RunAndReturn(run func(*entities.Wei) error) *CollateralManagementContractMock_AddCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// AddPegoutCollateral provides a mock function with given fields: amount
func (_m *CollateralManagementContractMock) AddPegoutCollateral(amount *entities.Wei) error {
	ret := _m.Called(amount)

	if len(ret) == 0 {
		panic("no return value specified for AddPegoutCollateral")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Wei) error); ok {
		r0 = rf(amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollateralManagementContractMock_AddPegoutCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPegoutCollateral'
type CollateralManagementContractMock_AddPegoutCollateral_Call struct {
	*mock.Call
}

// AddPegoutCollateral is a helper method to define mock.On call
//   - amount *entities.Wei
func (_e *CollateralManagementContractMock_Expecter) AddPegoutCollateral(amount interface{}) *CollateralManagementContractMock_AddPegoutCollateral_Call {
	return &CollateralManagementContractMock_AddPegoutCollateral_Call{Call: _e.mock.On("AddPegoutCollateral", amount)}
}

func (_c *CollateralManagementContractMock_AddPegoutCollateral_Call) Run(run func(amount *entities.Wei)) *CollateralManagementContractMock_AddPegoutCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Wei))
	})
	return _c
}

func (_c *CollateralManagementContractMock_AddPegoutCollateral_Call) Return(_a0 error) *CollateralManagementContractMock_AddPegoutCollateral_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementContractMock_AddPegoutCollateral_Call) RunAndReturn(run func(*entities.Wei) error) *CollateralManagementContractMock_AddPegoutCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddress provides a mock function with no fields
func (_m *CollateralManagementContractMock) GetAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CollateralManagementContractMock_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type CollateralManagementContractMock_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *CollateralManagementContractMock_Expecter) GetAddress() *CollateralManagementContractMock_GetAddress_Call {
	return &CollateralManagementContractMock_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *CollateralManagementContractMock_GetAddress_Call) Run(run func()) *CollateralManagementContractMock_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollateralManagementContractMock_GetAddress_Call) Return(_a0 string) *CollateralManagementContractMock_GetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementContractMock_GetAddress_Call) RunAndReturn(run func() string) *CollateralManagementContractMock_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetCollateral provides a mock function with given fields: address
func (_m *CollateralManagementContractMock) GetCollateral(address string) (*entities.Wei, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetCollateral")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Wei, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Wei); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementContractMock_GetCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCollateral'
type CollateralManagementContractMock_GetCollateral_Call struct {
	*mock.Call
}

// GetCollateral is a helper method to define mock.On call
//   - address string
func (_e *CollateralManagementContractMock_Expecter) GetCollateral(address interface{}) *CollateralManagementContractMock_GetCollateral_Call {
	return &CollateralManagementContractMock_GetCollateral_Call{Call: _e.mock.On("GetCollateral", address)}
}

func (_c *CollateralManagementContractMock_GetCollateral_Call) Run(run func(address string)) *CollateralManagementContractMock_GetCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CollateralManagementContractMock_GetCollateral_Call) Return(_a0 *entities.Wei, _a1 error) *CollateralManagementContractMock_GetCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementContractMock_GetCollateral_Call) RunAndReturn(run func(string) (*entities.Wei, error)) *CollateralManagementContractMock_GetCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetMinimumCollateral provides a mock function with no fields
func (_m *CollateralManagementContractMock) GetMinimumCollateral() (*entities.Wei, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMinimumCollateral")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func() (*entities.Wei, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *entities.Wei); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementContractMock_GetMinimumCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinimumCollateral'
type CollateralManagementContractMock_GetMinimumCollateral_Call struct {
	*mock.Call
}

// GetMinimumCollateral is a helper method to define mock.On call
func (_e *CollateralManagementContractMock_Expecter) GetMinimumCollateral() *CollateralManagementContractMock_GetMinimumCollateral_Call {
	return &CollateralManagementContractMock_GetMinimumCollateral_Call{Call: _e.mock.On("GetMinimumCollateral")}
}

func (_c *CollateralManagementContractMock_GetMinimumCollateral_Call) Run(run func()) *CollateralManagementContractMock_GetMinimumCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollateralManagementContractMock_GetMinimumCollateral_Call) Return(_a0 *entities.Wei, _a1 error) *CollateralManagementContractMock_GetMinimumCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementContractMock_GetMinimumCollateral_Call) RunAndReturn(run func() (*entities.Wei, error)) *CollateralManagementContractMock_GetMinimumCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetPegoutCollateral provides a mock function with given fields: address
func (_m *CollateralManagementContractMock) GetPegoutCollateral(address string) (*entities.Wei, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetPegoutCollateral")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Wei, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Wei); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementContractMock_GetPegoutCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPegoutCollateral'
type CollateralManagementContractMock_GetPegoutCollateral_Call struct {
	*mock.Call
}

// GetPegoutCollateral is a helper method to define mock.On call
//   - address string
func (_e *CollateralManagementContractMock_Expecter) GetPegoutCollateral(address interface{}) *CollateralManagementContractMock_GetPegoutCollateral_Call {
	return &CollateralManagementContractMock_GetPegoutCollateral_Call{Call: _e.mock.On("GetPegoutCollateral", address)}
}

func (_c *CollateralManagementContractMock_GetPegoutCollateral_Call) Run(run func(address string)) *CollateralManagementContractMock_GetPegoutCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CollateralManagementContractMock_GetPegoutCollateral_Call) Return(_a0 *entities.Wei, _a1 error) *CollateralManagementContractMock_GetPegoutCollateral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementContractMock_GetPegoutCollateral_Call) RunAndReturn(run func(string) (*entities.Wei, error)) *CollateralManagementContractMock_GetPegoutCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// GetPenalizedEvents provides a mock function with given fields: ctx, fromBlock, toBlock
func (_m *CollateralManagementContractMock) GetPenalizedEvents(ctx context.Context, fromBlock uint64, toBlock *uint64) ([]penalization.PenalizedEvent, error) {
	ret := _m.Called(ctx, fromBlock, toBlock)

	if len(ret) == 0 {
		panic("no return value specified for GetPenalizedEvents")
	}

	var r0 []penalization.PenalizedEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) ([]penalization.PenalizedEvent, error)); ok {
		return rf(ctx, fromBlock, toBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *uint64) []penalization.PenalizedEvent); ok {
		r0 = rf(ctx, fromBlock, toBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]penalization.PenalizedEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, *uint64) error); ok {
		r1 = rf(ctx, fromBlock, toBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollateralManagementContractMock_GetPenalizedEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPenalizedEvents'
type CollateralManagementContractMock_GetPenalizedEvents_Call struct {
	*mock.Call
}

// GetPenalizedEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock *uint64
func (_e *CollateralManagementContractMock_Expecter) GetPenalizedEvents(ctx interface{}, fromBlock interface{}, toBlock interface{}) *CollateralManagementContractMock_GetPenalizedEvents_Call {
	return &CollateralManagementContractMock_GetPenalizedEvents_Call{Call: _e.mock.On("GetPenalizedEvents", ctx, fromBlock, toBlock)}
}

func (_c *CollateralManagementContractMock_GetPenalizedEvents_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock *uint64)) *CollateralManagementContractMock_GetPenalizedEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*uint64))
	})
	return _c
}

func (_c *CollateralManagementContractMock_GetPenalizedEvents_Call) Return(_a0 []penalization.PenalizedEvent, _a1 error) *CollateralManagementContractMock_GetPenalizedEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollateralManagementContractMock_GetPenalizedEvents_Call) RunAndReturn(run func(context.Context, uint64, *uint64) ([]penalization.PenalizedEvent, error)) *CollateralManagementContractMock_GetPenalizedEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderResign provides a mock function with no fields
func (_m *CollateralManagementContractMock) ProviderResign() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProviderResign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollateralManagementContractMock_ProviderResign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderResign'
type CollateralManagementContractMock_ProviderResign_Call struct {
	*mock.Call
}

// ProviderResign is a helper method to define mock.On call
func (_e *CollateralManagementContractMock_Expecter) ProviderResign() *CollateralManagementContractMock_ProviderResign_Call {
	return &CollateralManagementContractMock_ProviderResign_Call{Call: _e.mock.On("ProviderResign")}
}

func (_c *CollateralManagementContractMock_ProviderResign_Call) Run(run func()) *CollateralManagementContractMock_ProviderResign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollateralManagementContractMock_ProviderResign_Call) Return(_a0 error) *CollateralManagementContractMock_ProviderResign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementContractMock_ProviderResign_Call) RunAndReturn(run func() error) *CollateralManagementContractMock_ProviderResign_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawCollateral provides a mock function with no fields
func (_m *CollateralManagementContractMock) WithdrawCollateral() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithdrawCollateral")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollateralManagementContractMock_WithdrawCollateral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawCollateral'
type CollateralManagementContractMock_WithdrawCollateral_Call struct {
	*mock.Call
}

// WithdrawCollateral is a helper method to define mock.On call
func (_e *CollateralManagementContractMock_Expecter) WithdrawCollateral() *CollateralManagementContractMock_WithdrawCollateral_Call {
	return &CollateralManagementContractMock_WithdrawCollateral_Call{Call: _e.mock.On("WithdrawCollateral")}
}

func (_c *CollateralManagementContractMock_WithdrawCollateral_Call) Run(run func()) *CollateralManagementContractMock_WithdrawCollateral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollateralManagementContractMock_WithdrawCollateral_Call) Return(_a0 error) *CollateralManagementContractMock_WithdrawCollateral_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollateralManagementContractMock_WithdrawCollateral_Call) RunAndReturn(run func() error) *CollateralManagementContractMock_WithdrawCollateral_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollateralManagementContractMock creates a new instance of CollateralManagementContractMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollateralManagementContractMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollateralManagementContractMock {
	mock := &CollateralManagementContractMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
