// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	blockchain "github.com/rsksmart/liquidity-provider-server/internal/entities/blockchain"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// RootstockRpcServerMock is an autogenerated mock type for the RootstockRpcServer type
type RootstockRpcServerMock struct {
	mock.Mock
}

type RootstockRpcServerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RootstockRpcServerMock) EXPECT() *RootstockRpcServerMock_Expecter {
	return &RootstockRpcServerMock_Expecter{mock: &_m.Mock}
}

// EstimateGas provides a mock function with given fields: ctx, addr, value, data
func (_m *RootstockRpcServerMock) EstimateGas(ctx context.Context, addr string, value *entities.Wei, data []byte) (*entities.Wei, error) {
	ret := _m.Called(ctx, addr, value, data)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Wei, []byte) (*entities.Wei, error)); ok {
		return rf(ctx, addr, value, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Wei, []byte) *entities.Wei); ok {
		r0 = rf(ctx, addr, value, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *entities.Wei, []byte) error); ok {
		r1 = rf(ctx, addr, value, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootstockRpcServerMock_EstimateGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGas'
type RootstockRpcServerMock_EstimateGas_Call struct {
	*mock.Call
}

// EstimateGas is a helper method to define mock.On call
//   - ctx context.Context
//   - addr string
//   - value *entities.Wei
//   - data []byte
func (_e *RootstockRpcServerMock_Expecter) EstimateGas(ctx interface{}, addr interface{}, value interface{}, data interface{}) *RootstockRpcServerMock_EstimateGas_Call {
	return &RootstockRpcServerMock_EstimateGas_Call{Call: _e.mock.On("EstimateGas", ctx, addr, value, data)}
}

func (_c *RootstockRpcServerMock_EstimateGas_Call) Run(run func(ctx context.Context, addr string, value *entities.Wei, data []byte)) *RootstockRpcServerMock_EstimateGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entities.Wei), args[3].([]byte))
	})
	return _c
}

func (_c *RootstockRpcServerMock_EstimateGas_Call) Return(_a0 *entities.Wei, _a1 error) *RootstockRpcServerMock_EstimateGas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootstockRpcServerMock_EstimateGas_Call) RunAndReturn(run func(context.Context, string, *entities.Wei, []byte) (*entities.Wei, error)) *RootstockRpcServerMock_EstimateGas_Call {
	_c.Call.Return(run)
	return _c
}

// GasPrice provides a mock function with given fields: ctx
func (_m *RootstockRpcServerMock) GasPrice(ctx context.Context) (*entities.Wei, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GasPrice")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entities.Wei, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entities.Wei); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootstockRpcServerMock_GasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasPrice'
type RootstockRpcServerMock_GasPrice_Call struct {
	*mock.Call
}

// GasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RootstockRpcServerMock_Expecter) GasPrice(ctx interface{}) *RootstockRpcServerMock_GasPrice_Call {
	return &RootstockRpcServerMock_GasPrice_Call{Call: _e.mock.On("GasPrice", ctx)}
}

func (_c *RootstockRpcServerMock_GasPrice_Call) Run(run func(ctx context.Context)) *RootstockRpcServerMock_GasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RootstockRpcServerMock_GasPrice_Call) Return(_a0 *entities.Wei, _a1 error) *RootstockRpcServerMock_GasPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootstockRpcServerMock_GasPrice_Call) RunAndReturn(run func(context.Context) (*entities.Wei, error)) *RootstockRpcServerMock_GasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, address
func (_m *RootstockRpcServerMock) GetBalance(ctx context.Context, address string) (*entities.Wei, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *entities.Wei
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Wei, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Wei); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wei)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootstockRpcServerMock_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type RootstockRpcServerMock_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *RootstockRpcServerMock_Expecter) GetBalance(ctx interface{}, address interface{}) *RootstockRpcServerMock_GetBalance_Call {
	return &RootstockRpcServerMock_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, address)}
}

func (_c *RootstockRpcServerMock_GetBalance_Call) Run(run func(ctx context.Context, address string)) *RootstockRpcServerMock_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RootstockRpcServerMock_GetBalance_Call) Return(_a0 *entities.Wei, _a1 error) *RootstockRpcServerMock_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootstockRpcServerMock_GetBalance_Call) RunAndReturn(run func(context.Context, string) (*entities.Wei, error)) *RootstockRpcServerMock_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHash provides a mock function with given fields: ctx, hash
func (_m *RootstockRpcServerMock) GetBlockByHash(ctx context.Context, hash string) (blockchain.BlockInfo, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHash")
	}

	var r0 blockchain.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (blockchain.BlockInfo, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) blockchain.BlockInfo); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(blockchain.BlockInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootstockRpcServerMock_GetBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHash'
type RootstockRpcServerMock_GetBlockByHash_Call struct {
	*mock.Call
}

// GetBlockByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *RootstockRpcServerMock_Expecter) GetBlockByHash(ctx interface{}, hash interface{}) *RootstockRpcServerMock_GetBlockByHash_Call {
	return &RootstockRpcServerMock_GetBlockByHash_Call{Call: _e.mock.On("GetBlockByHash", ctx, hash)}
}

func (_c *RootstockRpcServerMock_GetBlockByHash_Call) Run(run func(ctx context.Context, hash string)) *RootstockRpcServerMock_GetBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RootstockRpcServerMock_GetBlockByHash_Call) Return(_a0 blockchain.BlockInfo, _a1 error) *RootstockRpcServerMock_GetBlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootstockRpcServerMock_GetBlockByHash_Call) RunAndReturn(run func(context.Context, string) (blockchain.BlockInfo, error)) *RootstockRpcServerMock_GetBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeight provides a mock function with given fields: ctx
func (_m *RootstockRpcServerMock) GetHeight(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHeight")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootstockRpcServerMock_GetHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeight'
type RootstockRpcServerMock_GetHeight_Call struct {
	*mock.Call
}

// GetHeight is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RootstockRpcServerMock_Expecter) GetHeight(ctx interface{}) *RootstockRpcServerMock_GetHeight_Call {
	return &RootstockRpcServerMock_GetHeight_Call{Call: _e.mock.On("GetHeight", ctx)}
}

func (_c *RootstockRpcServerMock_GetHeight_Call) Run(run func(ctx context.Context)) *RootstockRpcServerMock_GetHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RootstockRpcServerMock_GetHeight_Call) Return(_a0 uint64, _a1 error) *RootstockRpcServerMock_GetHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootstockRpcServerMock_GetHeight_Call) RunAndReturn(run func(context.Context) (uint64, error)) *RootstockRpcServerMock_GetHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionReceipt provides a mock function with given fields: ctx, hash
func (_m *RootstockRpcServerMock) GetTransactionReceipt(ctx context.Context, hash string) (blockchain.TransactionReceipt, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionReceipt")
	}

	var r0 blockchain.TransactionReceipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (blockchain.TransactionReceipt, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) blockchain.TransactionReceipt); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(blockchain.TransactionReceipt)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RootstockRpcServerMock_GetTransactionReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionReceipt'
type RootstockRpcServerMock_GetTransactionReceipt_Call struct {
	*mock.Call
}

// GetTransactionReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *RootstockRpcServerMock_Expecter) GetTransactionReceipt(ctx interface{}, hash interface{}) *RootstockRpcServerMock_GetTransactionReceipt_Call {
	return &RootstockRpcServerMock_GetTransactionReceipt_Call{Call: _e.mock.On("GetTransactionReceipt", ctx, hash)}
}

func (_c *RootstockRpcServerMock_GetTransactionReceipt_Call) Run(run func(ctx context.Context, hash string)) *RootstockRpcServerMock_GetTransactionReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RootstockRpcServerMock_GetTransactionReceipt_Call) Return(_a0 blockchain.TransactionReceipt, _a1 error) *RootstockRpcServerMock_GetTransactionReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RootstockRpcServerMock_GetTransactionReceipt_Call) RunAndReturn(run func(context.Context, string) (blockchain.TransactionReceipt, error)) *RootstockRpcServerMock_GetTransactionReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// NewRootstockRpcServerMock creates a new instance of RootstockRpcServerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRootstockRpcServerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RootstockRpcServerMock {
	mock := &RootstockRpcServerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
