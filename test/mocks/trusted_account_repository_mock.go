// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/rsksmart/liquidity-provider-server/internal/entities"
	liquidity_provider "github.com/rsksmart/liquidity-provider-server/internal/entities/liquidity_provider"

	mock "github.com/stretchr/testify/mock"
)

// TrustedAccountRepositoryMock is an autogenerated mock type for the TrustedAccountRepository type
type TrustedAccountRepositoryMock struct {
	mock.Mock
}

type TrustedAccountRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TrustedAccountRepositoryMock) EXPECT() *TrustedAccountRepositoryMock_Expecter {
	return &TrustedAccountRepositoryMock_Expecter{mock: &_m.Mock}
}

// AddTrustedAccount provides a mock function with given fields: ctx, account
func (_m *TrustedAccountRepositoryMock) AddTrustedAccount(ctx context.Context, account entities.Signed[liquidity_provider.TrustedAccountDetails]) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for AddTrustedAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signed[liquidity_provider.TrustedAccountDetails]) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrustedAccountRepositoryMock_AddTrustedAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTrustedAccount'
type TrustedAccountRepositoryMock_AddTrustedAccount_Call struct {
	*mock.Call
}

// AddTrustedAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account entities.Signed[liquidity_provider.TrustedAccountDetails]
func (_e *TrustedAccountRepositoryMock_Expecter) AddTrustedAccount(ctx interface{}, account interface{}) *TrustedAccountRepositoryMock_AddTrustedAccount_Call {
	return &TrustedAccountRepositoryMock_AddTrustedAccount_Call{Call: _e.mock.On("AddTrustedAccount", ctx, account)}
}

func (_c *TrustedAccountRepositoryMock_AddTrustedAccount_Call) Run(run func(ctx context.Context, account entities.Signed[liquidity_provider.TrustedAccountDetails])) *TrustedAccountRepositoryMock_AddTrustedAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Signed[liquidity_provider.TrustedAccountDetails]))
	})
	return _c
}

func (_c *TrustedAccountRepositoryMock_AddTrustedAccount_Call) Return(_a0 error) *TrustedAccountRepositoryMock_AddTrustedAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrustedAccountRepositoryMock_AddTrustedAccount_Call) RunAndReturn(run func(context.Context, entities.Signed[liquidity_provider.TrustedAccountDetails]) error) *TrustedAccountRepositoryMock_AddTrustedAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustedAccount provides a mock function with given fields: ctx, address
func (_m *TrustedAccountRepositoryMock) DeleteTrustedAccount(ctx context.Context, address string) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustedAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrustedAccountRepositoryMock_DeleteTrustedAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustedAccount'
type TrustedAccountRepositoryMock_DeleteTrustedAccount_Call struct {
	*mock.Call
}

// DeleteTrustedAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *TrustedAccountRepositoryMock_Expecter) DeleteTrustedAccount(ctx interface{}, address interface{}) *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call {
	return &TrustedAccountRepositoryMock_DeleteTrustedAccount_Call{Call: _e.mock.On("DeleteTrustedAccount", ctx, address)}
}

func (_c *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call) Run(run func(ctx context.Context, address string)) *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call) Return(_a0 error) *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call) RunAndReturn(run func(context.Context, string) error) *TrustedAccountRepositoryMock_DeleteTrustedAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTrustedAccounts provides a mock function with given fields: ctx
func (_m *TrustedAccountRepositoryMock) GetAllTrustedAccounts(ctx context.Context) ([]entities.Signed[liquidity_provider.TrustedAccountDetails], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTrustedAccounts")
	}

	var r0 []entities.Signed[liquidity_provider.TrustedAccountDetails]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Signed[liquidity_provider.TrustedAccountDetails], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Signed[liquidity_provider.TrustedAccountDetails]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Signed[liquidity_provider.TrustedAccountDetails])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTrustedAccounts'
type TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call struct {
	*mock.Call
}

// GetAllTrustedAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TrustedAccountRepositoryMock_Expecter) GetAllTrustedAccounts(ctx interface{}) *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call {
	return &TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call{Call: _e.mock.On("GetAllTrustedAccounts", ctx)}
}

func (_c *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call) Run(run func(ctx context.Context)) *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call) Return(_a0 []entities.Signed[liquidity_provider.TrustedAccountDetails], _a1 error) *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call) RunAndReturn(run func(context.Context) ([]entities.Signed[liquidity_provider.TrustedAccountDetails], error)) *TrustedAccountRepositoryMock_GetAllTrustedAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrustedAccount provides a mock function with given fields: ctx, address
func (_m *TrustedAccountRepositoryMock) GetTrustedAccount(ctx context.Context, address string) (*entities.Signed[liquidity_provider.TrustedAccountDetails], error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustedAccount")
	}

	var r0 *entities.Signed[liquidity_provider.TrustedAccountDetails]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Signed[liquidity_provider.TrustedAccountDetails], error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Signed[liquidity_provider.TrustedAccountDetails]); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Signed[liquidity_provider.TrustedAccountDetails])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrustedAccountRepositoryMock_GetTrustedAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrustedAccount'
type TrustedAccountRepositoryMock_GetTrustedAccount_Call struct {
	*mock.Call
}

// GetTrustedAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *TrustedAccountRepositoryMock_Expecter) GetTrustedAccount(ctx interface{}, address interface{}) *TrustedAccountRepositoryMock_GetTrustedAccount_Call {
	return &TrustedAccountRepositoryMock_GetTrustedAccount_Call{Call: _e.mock.On("GetTrustedAccount", ctx, address)}
}

func (_c *TrustedAccountRepositoryMock_GetTrustedAccount_Call) Run(run func(ctx context.Context, address string)) *TrustedAccountRepositoryMock_GetTrustedAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TrustedAccountRepositoryMock_GetTrustedAccount_Call) Return(_a0 *entities.Signed[liquidity_provider.TrustedAccountDetails], _a1 error) *TrustedAccountRepositoryMock_GetTrustedAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrustedAccountRepositoryMock_GetTrustedAccount_Call) RunAndReturn(run func(context.Context, string) (*entities.Signed[liquidity_provider.TrustedAccountDetails], error)) *TrustedAccountRepositoryMock_GetTrustedAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTrustedAccount provides a mock function with given fields: ctx, account
func (_m *TrustedAccountRepositoryMock) UpdateTrustedAccount(ctx context.Context, account entities.Signed[liquidity_provider.TrustedAccountDetails]) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustedAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signed[liquidity_provider.TrustedAccountDetails]) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrustedAccountRepositoryMock_UpdateTrustedAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTrustedAccount'
type TrustedAccountRepositoryMock_UpdateTrustedAccount_Call struct {
	*mock.Call
}

// UpdateTrustedAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - account entities.Signed[liquidity_provider.TrustedAccountDetails]
func (_e *TrustedAccountRepositoryMock_Expecter) UpdateTrustedAccount(ctx interface{}, account interface{}) *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call {
	return &TrustedAccountRepositoryMock_UpdateTrustedAccount_Call{Call: _e.mock.On("UpdateTrustedAccount", ctx, account)}
}

func (_c *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call) Run(run func(ctx context.Context, account entities.Signed[liquidity_provider.TrustedAccountDetails])) *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Signed[liquidity_provider.TrustedAccountDetails]))
	})
	return _c
}

func (_c *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call) Return(_a0 error) *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call) RunAndReturn(run func(context.Context, entities.Signed[liquidity_provider.TrustedAccountDetails]) error) *TrustedAccountRepositoryMock_UpdateTrustedAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewTrustedAccountRepositoryMock creates a new instance of TrustedAccountRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrustedAccountRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrustedAccountRepositoryMock {
	mock := &TrustedAccountRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
